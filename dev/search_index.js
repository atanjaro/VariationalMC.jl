var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#VariationalMC.DeterminantalParameters","page":"API","title":"VariationalMC.DeterminantalParameters","text":"DeterminantalParameters( pars::Vector{AbstractString}, \n                        vals::Vector{AbstractFloat}, \n                        num_detpars::Int )\n\nA type defining a set of variational parameters for the determinantal wavefunction.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.DeterminantalParameters-Tuple{NamedTuple, ModelGeometry, Bool, String}","page":"API","title":"VariationalMC.DeterminantalParameters","text":"DeterminantalParameters( optimize::NamedTuple, \n                         model_geometry::ModelGeometry, \n                         pht::Bool, \n                         path_to_parameter_file::String )::DeterminantalParameters\n\nGiven an intial set of parameters and set of optimization flags, generates a set of variational parameters from an intial parameter file.\n\noptimize::NamedTuple: field of optimization flags\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed.\npath_to_parameter_file::String: filepath to initial parameter file.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.DeterminantalParameters-Tuple{NamedTuple, TightBindingModel, ModelGeometry, Float64, Int64, Bool}","page":"API","title":"VariationalMC.DeterminantalParameters","text":"DeterminantalParameters( optimize::NamedTuple, \n                         tight_binding_model::TightBindingModel, \n                         model_geometry::ModelGeometry, \n                         minabs_vpar::Float64, \n                         Ne::Int, \n                         pht::Bool )::DeterminantalParameters\n\nGiven an intial set of parameters and optimization flags, generates a set of variational parameters.\n\noptimize::NamedTuple: field of optimization flags.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice qunatities.\nminabs_vpar::Float64: minimum value of initialized variational parameters.\nNe::Int: total number of electrons.\npht::Bool: whether model is particle-hole transformed. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.DeterminantalWavefunction","page":"API","title":"VariationalMC.DeterminantalWavefunction","text":"DeterminantalWavefunction( W::Matrix{ComplexF64}, \n                           D::Matrix{ComplexF64}, \n                           M::Matrix{ComplexF64}\n                           U_int::Matrix{ComplexF64}, \n                           A::Vector{Any}, \n                           ε::Vector{Float64}, \n                           pconfig::Vector{Int64} )\n\nA type defining quantities related to a determinantal wavefunction.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.JastrowFactor","page":"API","title":"VariationalMC.JastrowFactor","text":"JastrowFactor( Tvec_f::Vector{Float64}, \n               Tvec_b::Vector{Float64} )\n\nA type defining quantities related to a Jastrow factor.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.JastrowParameters","page":"API","title":"VariationalMC.JastrowParameters","text":"JastrowParameters\n\nA type defining quantities related to Jastrow variational parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.JastrowParameters-Tuple{String, NamedTuple, ModelGeometry, Random.Xoshiro}","page":"API","title":"VariationalMC.JastrowParameters","text":"JastrowParameters( jastrow_type::String, \n                   optimize::NamedTuple,\n                   model_geometry::ModelGeometry,\n                   rng::Xoshiro )::JastrowParameters\n\nGiven a type of Jastrow factor and set of optimization flags, generates a random initial set of  Jastrow parameters.\n\njastrow_type::String: type of Jastrow factor: \"e-den-den\", \"e-spn-spn\". TBA: \"eph-den-den\", \"ph-den-den\"\noptimize::NamedTuple: field of optimization flags.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.JastrowParameters-Tuple{String, NamedTuple, ModelGeometry, String}","page":"API","title":"VariationalMC.JastrowParameters","text":"JastrowParameters( jastrow_type::String, \n                   optimize::NamedTuple,\n                   model_geometry::ModelGeometry,\n                   path_to_parameter_file::String )::JastrowParameters\n\nGiven a type of Jastrow factor and set of optimization flags, generates an initial set of  Jastrow parameters from a specfied file. \n\njastrow_type::String: type of Jastrow factor: \"e-den-den\", \"e-spn-spn\". TBA: \"eph-den-den\", \"ph-den-den\"\noptimize::NamedTuple: field of optimization flags.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npath_to_parameter_file::String: filepath to initial parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.MarkovMove","page":"API","title":"VariationalMC.MarkovMove","text":"MarkovMove( particle::Int, \n            k::Int, \n            l::Int, \n            possible::Bool )\n\nA type defining a Markov move.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.ModelGeometry","page":"API","title":"VariationalMC.ModelGeometry","text":"ModelGeometry( unit_cell::UnitCell, \n               lattice::Lattice, \n               bond::Vector{Vector{Any}} )\n\nA type defining model geometry.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.SimulationInfo","page":"API","title":"VariationalMC.SimulationInfo","text":"SimulationInfo\n\nA type containing information about the simulation, including the location data is written to, the simulation ID, and MPI process ID, and whether this simulation started a new simulation or resumed a previous simulation.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.SimulationInfo-Tuple{}","page":"API","title":"VariationalMC.SimulationInfo","text":"SimulationInfo( ; datafolder_prefix::String, \n                filepath::String = \".\", \n                sID::Int=0, \n                pID::Int=0 )\n\nCreates an instance of the SimulationInfo type.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.SpinModel","page":"API","title":"VariationalMC.SpinModel","text":"SpinModel( J₁::Float64,\n           J₂::Float64,\n           J₃::Float64 )\n\nA type defining a spin model.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.TightBindingModel","page":"API","title":"VariationalMC.TightBindingModel","text":"TightBindingModel( t₀::Float64,\n                   t₁::Float64 )\n\nA type defining a non-interacting tight binding model.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.add_charge_order!-Tuple{String, DeterminantalParameters, NamedTuple, Vector{Any}, Vector{Any}, ModelGeometry, Bool}","page":"API","title":"VariationalMC.add_charge_order!","text":"add_charge_order!( order::String, \n                   determinantal_parameters::DeterminantalParameters, \n                   optimize::NamedTuple, \n                   H_vpars::Vector{Any}, \n                   V::Vector{Any}, \n                   model_geometry::ModelGeometry, \n                   pht::Bool )::Nothing\n\nAdds a charge order term to the auxiliary Hamiltonian.\n\norder::String: type of spin order: \"density wave\" or \"site-dependent\"\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nH_vpars::Vector{Any}: vector of variational Hamiltonian matrices.\nV::Vector{Any}: vector of variational operators.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model if particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.add_chemical_potential!-Tuple{DeterminantalParameters, NamedTuple, Vector{Any}, Vector{Any}, ModelGeometry, Bool}","page":"API","title":"VariationalMC.add_chemical_potential!","text":"add_chemical_potential!( determinantal_parameters::DeterminantalParameters, \n                         optimize::NamedTuple, \n                         H_vpars::Vector{Any}, \n                         V::Vector{Any}, \n                         model_geometry::ModelGeometry, \n                         pht::Bool )::Nothing\n\nAdds a chemical potential term to the auxiliary Hamiltonian.\n\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nH_vpars::Vector{Any}: vector of variational Hamiltonian matrices.\nV::Vector{Any}: vector of variational operators.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model if particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.add_pairing_symmetry!-Tuple{String, DeterminantalParameters, NamedTuple, Vector{Any}, Vector{Any}, ModelGeometry, Bool}","page":"API","title":"VariationalMC.add_pairing_symmetry!","text":"add_pairing_symmetry!( symmetry::String, \n                       determinantal_parameters::DeterminantalParameters, \n                       optimize::NamedTuple, \n                       H_vpars::AbstractMatrix{<:Complex}, \n                       V, \n                       model_geometry::ModelGeometry, \n                       pht::Bool )::Nothing\n\nAdds a pairing symmetry term to the auxiliary Hamiltonian. \n\nsymmetry::String: type of pairing symmetry: \"s\" or \"d\"\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nH_vpars::Vector{Any}: vector of variational Hamiltonian matrices.\nV::Vector{Any}: vector of variational operators.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities. \npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.add_spin_order!-Tuple{String, DeterminantalParameters, NamedTuple, Vector{Any}, Vector{Any}, ModelGeometry, Bool}","page":"API","title":"VariationalMC.add_spin_order!","text":"add_spin_order!( order::String, \n                 determinantal_parameters::DeterminantalParameters, \n                 optimize::NamedTuple, \n                 H_vpars::Vector{Any}, \n                 V::Vector{Any}, \n                 model_geometry::ModelGeometry, \n                 pht::Bool )::Nothing\n\nAdds a spin order term to the auxiliary Hamiltonian. \n\norder::String: type of spin order: \"spin-z\" or \"site-dependent\"\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nH_vpars::Vector{Any}: vector of variational Hamiltonian matrices.\nV::Vector{Any}: vector of variational operators.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model if particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.build_auxiliary_hamiltonian-Tuple{TightBindingModel, DeterminantalParameters, NamedTuple, ModelGeometry, Bool}","page":"API","title":"VariationalMC.build_auxiliary_hamiltonian","text":"build_auxiliary_hamiltonian( tight_binding_model::TightBindingModel, \n                             determinantal_parameters::DeterminantalParameters, \n                             pht::Bool )\n\nConstructs a complete Hamiltonian matrix by combining the non-interacting matrix with matrices of variational terms.\n\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model.\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hol transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.build_tight_binding_hamiltonian-Tuple{TightBindingModel, ModelGeometry, Bool}","page":"API","title":"VariationalMC.build_tight_binding_hamiltonian","text":"build_tight_binding_hamiltonian( tight_binding_model::TightBindingModel,\n                                 model_geometry::ModelGeometry,\n                                 pht::Bool )\n\nConstructs a 2N by 2N Hamiltonian matrix where N is the number of lattice sites,  given tight binding parameters t, and t'.\n\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.build_variational_hamiltonian-Tuple{DeterminantalParameters, NamedTuple, Bool}","page":"API","title":"VariationalMC.build_variational_hamiltonian","text":"build_variational_hamiltonian( determinantal_parameters::DeterminantalParameters, \n                               optimize::NamedTuple, \n                               pht::Bool )\n\nConstructs 2N by 2N matrices to be added to the non-interacting tight binding Hamiltonian for each variational parameter,  where N is the number of lattice sites. Returns a vector of the sum of matrices and a vector of individual matrix terms.\n\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\npht::Bool: whether model is particle-hole transformed. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.check_deviation-Tuple{DeterminantalWavefunction, Matrix{ComplexF64}}","page":"API","title":"VariationalMC.check_deviation","text":"check_deviation!( detwf::DeterminantalWavefunction, \n                  Wᵣ::Matrix{ComplexF64} )::Float64\n\nChecks floating point error accumulation in the equal-time Green's function.\n\ndetwf::DeterminantalWavefunction: current variational wavefunction. \nWᵣ::Matrix{ComplexF64}: reclculated Green's function matrix\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.check_deviation-Tuple{Vector{Float64}, Vector{Float64}}","page":"API","title":"VariationalMC.check_deviation","text":"check_deviation!( jastrow_Tvec::Vector{Float64}, \n                  Tvec_r::Vector{Float64} )::Float64\n\nChecks floating point error accumulation in the fermionic T vector.\n\njastrow_Tvec::Vector{Float64}: current T vector. \nTvec_r::Vector{Float64}: recalculated T vector. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.collect_parameters-Tuple{DeterminantalParameters, JastrowParameters}","page":"API","title":"VariationalMC.collect_parameters","text":"collect_parameters( determinantal_parameters::DeterminantalParameters, \n                    jastrow_parameters::JastrowParameters )::Vector{AbstractFloat}\n\nConcatenates all values of determinantal and Jastrow parameters into a single vector.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.create_datafolder_prefix-Tuple{NamedTuple, String}","page":"API","title":"VariationalMC.create_datafolder_prefix","text":"create_datafolder_prefix( optimize::NamedTuple, \n                          df_prefix::String )::String\n\nCheck the optimization fields and appends parameter names to the end of the foldername. Returns the datafolder prefix.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.d-Tuple{Int64, Int64, ModelGeometry}","page":"API","title":"VariationalMC.d","text":"d( p1::Int, p2::Int, model_geometry::ModelGeometry )\n\nGiven lattice indices i and j, returns the distances between those 2 points, accounting  for the latticed edges with different boundary conditions.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.diagonalize-Tuple{AbstractMatrix{<:Complex}}","page":"API","title":"VariationalMC.diagonalize","text":"diagonalize( H::Matrix{ComplexF64} )::Tuple{Vector{Float64}, Matrix{ComplexF64}}\n\nReturns all eigenenergies and all eigenstates of the mean-field Hamiltonian,  the latter being stored in the columns of a matrix. Convention: H(diag) = U⁺HU.\n\nH::AbstractMatrix{<:Complex}: auxiliary Hamiltonian.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.generate_initial_fermion_configuration-Tuple{Int64, Int64, ModelGeometry, Random.Xoshiro}","page":"API","title":"VariationalMC.generate_initial_fermion_configuration","text":"generate_initial_fermion_configuration( nup::Int64, \n                                        ndn::Int64, \n                                        model_geometry::ModelGeometry, \n                                        rng::Xoshiro )::Vector{Int64}\n\nGenerates a random initial configuration of spin-up and spin-down fermions. The first N elements correspond  to spin-up and the last N correspond to spin-down. Occupation is denoted by a positive integer corresponding  to that particle's creation operator label. \n\nnup::Int64: number of spin-up electrons.\nndn::Int64: number of spin-down electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_covariance_matrix-Tuple{NamedTuple, Int64}","page":"API","title":"VariationalMC.get_covariance_matrix","text":"get_covariance_matrix( measurement_container::NamedTuple, \n                       opt_bin_size::Int64 )\n\nCalculates the covariance matrix S, for Stochastic Reconfiguration, with elements Skk' = <ΔkΔk'> - <Δk><Δk'>.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \nopt_bin_size::Int64: length of the current bin.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_determinantal_wavefunction","page":"API","title":"VariationalMC.get_determinantal_wavefunction","text":"get_determinantal_wavefunction( tight_binding_model::TightBindingModel, \n                                determinantal_parameters::DeterminantalParameters, \n                                Ne::Int64, \n                                nup::Int64, \n                                ndn::Int64,\n                                model_geometry::ModelGeometry, \n                                rng::Xoshiro)::DeterminantalWavefunction\n\nConstructs a variational wavefunction based on parameters given by the tight binding model and determinantal parameters.  Returns an instances of the DeterminantalWavefunction type. If no particle configuration is specified, a random configuration will be generated.                            \n\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nNe::Int: total number of electrons.\nnup::Int: number of spin-up electrons.\nndn::Int: number of spin-down electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nrng::Xoshiro: random number.\npconfig::Union{Nothing, Vector{Int}}=nothing: current particle configuration. \n\n\n\n\n\n","category":"function"},{"location":"api/#VariationalMC.get_double_occ-Tuple{DeterminantalWavefunction, ModelGeometry, Bool}","page":"API","title":"VariationalMC.get_double_occ","text":"get_double_occ( detwf::DeterminantalParameters, \n                model_geometry::ModelGeometry, \n                pht::Bool )::Float64\n\nCalculates the double occupancy. \n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_fermionic_Tvec-Tuple{JastrowParameters, DeterminantalWavefunction, Bool, ModelGeometry}","page":"API","title":"VariationalMC.get_fermionic_Tvec","text":"get_fermionic_Tvec( jastrow_parameters::JastrowParameters,  \n                    detwf::DeterminantalWavefunction, \n                    pht::Bool, \n                    model_geometry::ModelGeometry )::Vector{Float64}\n\nReturns T vector with entries of the form Tᵢ = ∑ⱼ vᵢⱼnᵢ(x) where vᵢⱼ are the  associated Jastrow peseudopotentials and nᵢ(x) is the total electron occupation.\n\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\ndetwf::DeterminantalWavefunction: current variational wavefunction. \npht::Bool: whether model is particle-hole transformed.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_fermionic_jastrow_ratio-Tuple{Int64, Int64, JastrowParameters, JastrowFactor, Bool, Int64, ModelGeometry}","page":"API","title":"VariationalMC.get_fermionic_jastrow_ratio","text":"get_fermionic_jastrow_ratio( k::Int64, \n                             l::Int64, \n                             jastrow_parameters::JastrowParameters,\n                             jastrow_factor::JastrowFactor, \n                             pht::Bool, \n                             spin::Int64, \n                             model_geometry::ModelGeometry )\n\nCalculates ratio J(x₂)/J(x₁) = exp[-s(Tₗ - Tₖ) + vₗₗ - vₗₖ ] of Jastrow factors for particle configurations  which differ by a single particle hopping from site 'k' (configuration 'x₁') to site 'l' (configuration 'x₂') using the corresponding T vectors Tₖ and Tₗ, rsepctively.  \n\nk::Int64: initial site of the current particle. \nl::Int64: final site of the current particle. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor.\npht::Bool: whether model is particle-hole transformed.\nspin::Int64: spin of the current particle.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_fermionic_jastrow_ratio-Tuple{VariationalMC.MarkovMove, JastrowParameters, JastrowFactor, Bool, Int64, ModelGeometry}","page":"API","title":"VariationalMC.get_fermionic_jastrow_ratio","text":"get_fermionic_jastrow_ratio( markov_move::MarkovMove, \n                             jastrow_parameters::JastrowParameters\n                             jastrow_factor::JastrowFactor, \n                             pht::Bool, \n                             spin::Int64, \n                             model_geometry::ModelGeometry )\n\nCalculates ratio J(x₂)/J(x₁) = exp[-s(Tₗ - Tₖ) + vₗₗ - vₗₖ ] of Jastrow factors for particle configurations  which differ by a single particle hopping from site 'k' (configuration 'x₁') to site 'l' (configuration 'x₂') using the corresponding T vectors Tₖ and Tₗ, rsepctively.  \n\nmarkov_move::MarkovMove: quantities related to a Markov move.  \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor.\npht::Bool: whether model is particle-hole transformed.\nspin::Int64: spin of the current particle.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_force_vector-Tuple{NamedTuple, Int64}","page":"API","title":"VariationalMC.get_force_vector","text":"get_force_vector( measurement_container::NamedTuple, \n                  opt_bin_size::Int64 )\n\nGenerates the force vector f, for Stochastic Reconfiguration with elements  fk = <Δk><H> - <Δ_kH>.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \nopt_bin_size::Int64: length of the current bin.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_index_from_spindex-Tuple{Int64, ModelGeometry}","page":"API","title":"VariationalMC.get_index_from_spindex","text":"get_index_from_spindex( spindex::Int, \n                        model_geometry::ModelGeometry )::Int\n\nReturns the lattice site i for a given spindex.\n\nspindex::Int: spin index.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_jastrow_factor-Tuple{JastrowParameters, DeterminantalWavefunction, ModelGeometry, Bool}","page":"API","title":"VariationalMC.get_jastrow_factor","text":"get_jastrow_factor( jastrow_parameters::JastrowParameters, \n                    detwf::DeterminantalWavefunction, \n                    model_geometry::ModelGeometry, \n                    pht::Bool )::JastrowFactor\n\nConstructs specified Jastrow factor and returns a instance of the JastrowFactor type. \n\njastrow_parameters::JastrowParameters: current set of Jastrow parameters. \ndetwf::DeterminantalWavefunction: current variational wavefunction. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_linked_spindex-Tuple{Int64, Int64}","page":"API","title":"VariationalMC.get_linked_spindex","text":"get_linked_spindex( i::Int, \n                    N::Int )::Int\n\nReturns an index in the spin-down sector, given an index in the spin-up sector.\n\ni::Int: lattice index in the spin-up sector.\nN::Int: total number of lattice sites. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_local_energy-Tuple{DeterminantalWavefunction, TightBindingModel, JastrowParameters, JastrowFactor, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.get_local_energy","text":"get_local_energy( detwf::DeterminantalWavefunction, \n                  tight_binding_model::TightBindingModel,\n                  jastrow_parameters::JastrowParameters, \n                  jastrow_factor::JastrowParameters,\n                  model_geometry::ModelGeometry\n                  Ne::Int64,\n                  pht::Bool )::Nothing\n\nCalculates the local variational energy per site for a Hubbard model.\n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_local_energy-Tuple{DeterminantalWavefunction, TightBindingModel, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.get_local_energy","text":"get_local_energy( detwf::DeterminantalWavefunction, \n                  tight_binding_model::TightBindingModel, \n                  model_geometry::ModelGeometry, \n                  Ne::Int64, \n                  pht::Bool )::Float64\n\nCalculates the local variational energy per site for a Hubbard model (without a Jastrow factor).\n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_local_hubbard_energy-Tuple{Float64, DeterminantalWavefunction, ModelGeometry, Bool}","page":"API","title":"VariationalMC.get_local_hubbard_energy","text":"get_local_hubbard_energy( U::Float64, \n                          detwf::DeterminantalWavefunction, \n                          model_geometry::ModelGeometry, \n                          pht::Bool )::Float64\n\nCalculates the energy due to onsite Hubbard repulsion.  \n\nU::Float64: Hubbard repulsion.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_local_kinetic_energy-Tuple{DeterminantalWavefunction, TightBindingModel, JastrowParameters, JastrowFactor, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.get_local_kinetic_energy","text":"get_local_kinetic_energy( detwf::DeterminantalWavefunction, \n                          tight_binding_model::TightBindingModel, \n                          jastrow_parameters::JastrowParameters,\n                          jastrow_factor::JastrowFactor, \n                          model_geometry::ModelGeometry, \n                          Ne::Int64,\n                          pht::Bool )::Float64\n\nCalculates the local electronic kinetic energy. \n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_local_kinetic_energy-Tuple{DeterminantalWavefunction, TightBindingModel, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.get_local_kinetic_energy","text":"get_local_kinetic_energy( detwf::DeterminantalWavefunction, \n                          tight_binding_model::TightBindingModel, \n                          model_geometry::ModelGeometry, \n                          Ne::Int64\n                          pht::Bool )::Float64\n\nCalculates the local electronic kinetic energy. \n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_n-Tuple{DeterminantalWavefunction, ModelGeometry}","page":"API","title":"VariationalMC.get_n","text":"get_n( detwf::DeterminantalWavefunction, \n       model_geometry::ModelGeometry )::Float64\n\nCalculate the local density.\n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_onsite_fermion_occupation-Tuple{Int64, Vector{Int64}}","page":"API","title":"VariationalMC.get_onsite_fermion_occupation","text":"get_onsite_fermion_occupation( site::Int, \n                               pconfig::Vector{Int} )::Tuple{Int64, Int64, Int64}\n\nReturns the number of spin-up and spin-down electrons occupying a real lattice site 'i'.  \n\nsite::Int: lattice site. \npconfig::Vector{Int}: current particle configuration.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_particle_density-Tuple{Int64, Int64}","page":"API","title":"VariationalMC.get_particle_density","text":"get_particle_density( nup::Int64, \n                      ndn::Int64 )::Tuple{Float64, Int64, Int64}\n\nGiven the number of spin-up electrons nup, and number of spin-down electrons ndn, returns  the particle density, total number of particles Np, and the total number of electrons Ne.\n\nnup::Int: number of spin-up electrons.\nndn::Int: number of spin-down electrons.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_particle_numbers-Tuple{Float64}","page":"API","title":"VariationalMC.get_particle_numbers","text":"get_particle_numbers( density::Float64 )::NTuple{4, Int64}\n\nGiven a particle density, returns the total number of particles Np, number of spin-up particles Npu,  number of spin-down particles Npd, and total number of electrons Ne.\n\ndensity::Float64: desired electronic density.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_spindex_type-Tuple{Int64, ModelGeometry}","page":"API","title":"VariationalMC.get_spindex_type","text":"get_spindex_type( spindex::Int, \n                  model_geometry::ModelGeometry )::Int\n\nReturns the spin species at a given spindex.\n\nspindex::Int: spin index.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_spindices_from_index-Tuple{Int64, ModelGeometry}","page":"API","title":"VariationalMC.get_spindices_from_index","text":"get_spindices_from_index( index::Int, \n                          model_geometry::ModelGeometry )::Tuple{Int64, Int64}\n\nReturns spin-up and spin-down indices from a given site index.\n\nindex::Int: lattice site index.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_tb_chem_pot-Tuple{Int64, TightBindingModel, ModelGeometry}","page":"API","title":"VariationalMC.get_tb_chem_pot","text":"get_tb_chem_pot( Ne::Int64, \n                 tight_binding_model::TightBindingModel, \n                 model_geometry::ModelGeometry )::Float64\n\nFor a tight-binding model that has not been particle-hole transformed, returns the   chemical potential.\n\nNe::Int64: total number of electrons.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_variational_matrices-Tuple{Vector{Any}, Matrix{ComplexF64}, Vector{Float64}, ModelGeometry}","page":"API","title":"VariationalMC.get_variational_matrices","text":"get_variational_matrices( V::Vector{Any}, \n                          U_int::Matrix{ComplexF64}, \n                          ε::Vector{Float64}, \n                          model_geometry::ModelGeometry )::Vector{Any}\n\nReturns variational parameter matrices Aₖ from the corresponding Vₖ. Computes  Qₖ = (U⁺VₖU)(ην) / (εη - ε_ν), for η > Nₚ and ν ≤ Nₚ and is 0 otherwise (η and ν run from 1 to 2N).\n\nV::Vector{Any}: vector of variational operators. \nU_int::Matrix{ComplexF64}: matrix which diagonalizes the auxiliary Hamiltonian.\nε::Vector{Float64}: initial energies.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_Δk-Tuple{NamedTuple, DeterminantalParameters, DeterminantalWavefunction, ModelGeometry, Int64}","page":"API","title":"VariationalMC.get_Δk","text":"get_Δk( optimize::NamedTuple, \n        determinantal_parameters::DeterminantalParameters, \n        detwf::DeterminantalWavefunction, \n        model_geometry::ModelGeometry, \n        Ne::Int )::Vector{Float64}\n\nCalculates the local logarithmic derivative Δₖ(x) = ∂lnΨ(x)/∂αₖ, with respect to the kth variational parameter αₖ, in the determinantal part of the wavefunction. Returns a vector of derivatives.\n\noptimize::NamedTuple: field of optimization flags.\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\ndetwf::DeterminantalWavefunction: current variational wavefunction. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int: total number of electrons. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.get_Δk-Tuple{NamedTuple, DeterminantalParameters, JastrowParameters, DeterminantalWavefunction, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.get_Δk","text":"get_Δk( optimize::NamedTuple, \n        determinantal_parameters::DeterminantalParameters, \n        jastrow_parameters::JastrowParameters,\n        detwf::DeterminantalWavefunction, \n        model_geometry::ModelGeometry, \n        Ne::Int,\n        pht::Bool )::Vector{Float64}\n\nCalculates the local logarithmic derivative Δₖ(x) = ∂lnΨ(x)/∂αₖ, with respect to the kth variational parameter αₖ, in the determinantal part of the wavefunction. Returns a vector of derivatives.\n\noptimize::NamedTuple: field of optimization flags.\ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters. \ndetwf::DeterminantalWavefunction: current variational wavefunction. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int: total number of electrons. \npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.hop!-Tuple{VariationalMC.MarkovMove, Vector{Int64}}","page":"API","title":"VariationalMC.hop!","text":"hop!( markov_move::MarkovMove, \n      pconfig::Vector{Int} )::Nothing\n\nIf proposed hopping move is accepted, updates the particle positions.\n\nmarkov_move::MarkovMove: quantities related to a Markov move.  \npconfig::Vector{Int}: current particle configuration. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.initialize_datafolder-Tuple{SimulationInfo}","page":"API","title":"VariationalMC.initialize_datafolder","text":"initialize_datafolder( sim_info::SimulationInfo )::Nothing\n\nInitalize sim_info.datafolder directory if it does not already exist.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.initialize_equal_time_greens!-Tuple{Matrix{ComplexF64}, Matrix{ComplexF64}, Matrix{ComplexF64}, Vector{Int64}, Int64}","page":"API","title":"VariationalMC.initialize_equal_time_greens!","text":"initialize_equal_time_greens( W::Matrix{ComplexF64}, \n                              D::Matrix{ComplexF64}, \n                              M::Matrix{ComplexF64}, \n                              pconfig::Vector{Int64}, \n                              N::Int64, \n                              Ne::Int64 )::Bool\n\nComputes the equal-time Green's function by solving the matrix equation DᵀWᵀ = Mᵀ through LU decomposition.\n\nW::Matrix{ComplexF64}: equal-time Green's function matrix.\nD::Matrix{ComplexF64}: Slater determinant matrix.\nM::Matrix{ComplexF64}: reduced U_int matrix.\npconfig::Vector{Int64}: current particle configuration.\nNe::Int64: total number of electrons.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.initialize_measurement_container-Tuple{Int64, Int64, Int64, Int64, DeterminantalParameters, JastrowParameters, ModelGeometry}","page":"API","title":"VariationalMC.initialize_measurement_container","text":"initialize_measurement_container( N_opts::Int, \n                                  opt_bin_size::Int, \n                                  N_bins::Int, \n                                  bin_size::Int,\n                                  determinantal_parameters::DeterminantalParameters, \n                                  jastrow_parameters::JastrowParameters,\n                                  model_geometry::ModelGeometry )::NamedTuple\n\nInitializes a set of dictionaries containing generic arrays for storing measurements. Each dictionary in the container has [keys => values] of the form: [observable name => (local value(s), current bin value(s))] \n\nN_opts::Int: number of optimization updates.\nopt_bin_size::Int: length of an optimization bin.\nN_bins::Int: number of simulation bins.\nbin_size::Int: length of a simulation bin. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: set of Jastrow variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.initialize_measurement_container-Tuple{Int64, Int64, Int64, Int64, DeterminantalParameters, ModelGeometry}","page":"API","title":"VariationalMC.initialize_measurement_container","text":"initialize_measurement_container( N_opts::Int, \n                                  opt_bin_size::Int, \n                                  N_bins::Int, \n                                  bin_size::Int,\n                                  determinantal_parameters::DeterminantalParameters, \n                                  model_geometry::ModelGeometry )::NamedTuple\n\nInitializes a set of dictionaries containing generic arrays for storing measurements. Each dictionary in the container has [keys => values] of the form: [observable name => (local value(s), current bin value(s))] \n\nN_opts::Int: number of optimization updates.\nopt_bin_size::Int: length of an optimization bin.\nN_bins::Int: number of simulation bins.\nbin_size::Int: length of a simulation bin. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.initialize_measurement_directories-Tuple{SimulationInfo, NamedTuple}","page":"API","title":"VariationalMC.initialize_measurement_directories","text":"initialize_measurement_directories( simulation_info::SimulationInfo, \n                                    measurement_container::NamedTuple )::Nothing\n\nCreates file directories and subdirectories for storing measurements. \n\nsimulation_info::SimulationInfo: contains datafolder information.\nmeasurement_container::NamedTuple: container where measurements are contained.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.is_openshell-Tuple{Vector{Float64}, Int64}","page":"API","title":"VariationalMC.is_openshell","text":"is_openshell( ε::Vector{Float64},  \n              Np::Int )::Bool\n\nChecks whether a energy configuration is open shell.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.local_fermion_update!-Tuple{DeterminantalWavefunction, Int64, ModelGeometry, Any, Float64, Random.Xoshiro}","page":"API","title":"VariationalMC.local_fermion_update!","text":"local_fermion_update!( detwf::DeterminantalWavefunction,\n                       Ne::Int, \n                       model_geometry::ModelGeometry, \n                       pht::Bool, \n                       δW::Float64, \n                       δT::Float64, \n                       rng::Xoshiro )\n\nPerforms a local update to the electronic sector, with a certain number of equilibration steps.\n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\nNe::Int: total number of electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_W: frequency of Green's function stabilization steps.\nδW::Float64: error threshold for the Green's function.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.local_fermion_update!-Tuple{DeterminantalWavefunction, JastrowFactor, JastrowParameters, Int64, ModelGeometry, Bool, Any, Any, Float64, Float64, Random.Xoshiro}","page":"API","title":"VariationalMC.local_fermion_update!","text":"local_fermion_update!( detwf::DeterminantalWavefunction, \n                       jastrow_factor::JastrowFactor, \n                       jastrow_parameters::JastrowParameters,\n                       Ne::Int, \n                       model_geometry::ModelGeometry, \n                       pht::Bool, \n                       δW::Float64, \n                       δT::Float64, \n                       rng::Xoshiro )\n\nPerforms a local update to the electronic sector, with a certain number of equilibration steps.\n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow::Jastrow: current Jastrow factor.\nNe::Int: total number of electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_W: frequency of Green's function stabilization steps.\nn_stab_T: frequency of T vector stabilization steps.\nδW::Float64: error threshold for the Green's function.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.make_measurements!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, DeterminantalParameters, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.make_measurements!","text":"make_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel,\n                    determinantal_parameters::DeterminantalParameters,\n                    optimize::NamedTuple, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )::Nothing\n\nMeasures global, optimization, and simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.make_measurements!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, JastrowParameters, JastrowFactor, DeterminantalParameters, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.make_measurements!","text":"make_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel,\n                    determinantal_parameters::DeterminantalParameters,\n                    jastrow_parameters::JastrowParameters,\n                    jastrow_factor::JastrowFactor, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )::Nothing\n\nMeasures global, optimization, and simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.make_measurements!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, JastrowParameters, JastrowFactor, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.make_measurements!","text":"make_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel, \n                    jastrow_parameters::JastrowParameters,\n                    jastrow_factor::JastrowFactor, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )\n\nMeasures simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.make_measurements!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.make_measurements!","text":"make_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )\n\nMeasures simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hoel transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.map_jastrow_parameters-Tuple{ModelGeometry, Random.Xoshiro}","page":"API","title":"VariationalMC.map_jastrow_parameters","text":"map_jastrow_parameters( model_geometry::ModelGeometry, \n                        rng::Xoshiro )::OrderedDict{Any, Any}\n\nGenerates a dictionary of irreducible indices k which reference a tuple consisting of a vector of lattice index  pairs (i,j) which generate k, and Jastrow parameters vᵢⱼ. The parameter corresponding to the  largest k is automatically initialized to 0, all others are randomly initialized.\n\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.  \nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.map_jastrow_parameters-Tuple{ModelGeometry, Vector{Float64}}","page":"API","title":"VariationalMC.map_jastrow_parameters","text":"map_jastrow_parameters( model_geometry::ModelGeometry, \n                        vpar_dict::Dict{Symbol, Any} )::OrderedDict{Any, Any}\n\nGenerates a dictionary of irreducible indices k which reference a tuple consisting of a vector of lattice index  pairs (i,j) which generate k, and Jastrow parameters vᵢⱼ. The parameter corresponding to the  largest k is automatically initialized to 0, all others are read in from file.\n\nmodel_geometry::ModelGeometry: contains unit cell and lattice qunatities. \nvpar_dict::Dict{Symbol, Any}: dictionary of variational parameters from file.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.max_dist-Tuple{Int64, Int64}","page":"API","title":"VariationalMC.max_dist","text":"max_dist( N::Int, L::Int )\n\nObtains the maximum irreducible index given the total number of sites N and extent of the lattice L.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_double_occ!-Tuple{NamedTuple, DeterminantalWavefunction, ModelGeometry, Bool}","page":"API","title":"VariationalMC.measure_double_occ!","text":"measure_double_occ!( measurement_container::NamedTuple, \n                     detwf::DeterminantalWavefunction, \n                     model_geometry::ModelGeometry, \n                     pht::Bool )::Nothing\n\nMeasure the average double occupancy ⟨D⟩ = N⁻¹ ∑ᵢ ⟨nᵢ↑nᵢ↓⟩.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_local_energy!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, JastrowParameters, JastrowFactor, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.measure_local_energy!","text":"measure_local_energy!( measurement_container::NamedTuple, \n                       detwf::DeterminantalWavefunction, \n                       tight_binding_model::TightBindingModel, \n                       jastrow_parameters::JastrowParameters,\n                       jastrow_factor::JastrowFactor, \n                       model_geometry::ModelGeometry,\n                       Ne::Int64, \n                       pht::Bool )::Nothing\n\nMeasures the total local energy for a Hubbard model and writes to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_local_energy!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.measure_local_energy!","text":"measure_local_energy!( measurement_container::NamedTuple, \n                       detwf::DeterminantalWavefunction, \n                       tight_binding_model::TightBindingModel, \n                       model_geometry::ModelGeometry,\n                       Ne::Int64,\n                       pht::Bool )::Nothing\n\nMeasures the total local energy for a Hubbard model and writes to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_n!-Tuple{NamedTuple, DeterminantalWavefunction, ModelGeometry}","page":"API","title":"VariationalMC.measure_n!","text":"measure_n!( measurement_container::NamedTuple, \n            detwf::DeterminantalWavefunction, \n            model_geometry::ModelGeometry )::Nothing\n\nMeasure the local particle density ⟨n⟩.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_parameters!-Tuple{NamedTuple, DeterminantalParameters, JastrowParameters}","page":"API","title":"VariationalMC.measure_parameters!","text":"measure_parameters!( measurement_container::NamedTuple, \n                     determinantal_parameters::DeterminantalParameters, \n                     jastrow_parameters::JastrowParameters )::Nothing\n\nMeasures all initialized variational parameters and then writes them to the measurment container.  The first 'p' are determinantal parameters and the rest are Jastrow parameters. \n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_parameters!-Tuple{NamedTuple, DeterminantalParameters}","page":"API","title":"VariationalMC.measure_parameters!","text":"measure_parameters!( measurement_container::NamedTuple, \n                     determinantal_parameters::DeterminantalParameters )::Nothing\n\nMeasures all variational (determinantal) parameters and then writes them to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_Δk!-Tuple{NamedTuple, DeterminantalWavefunction, DeterminantalParameters, JastrowParameters, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.measure_Δk!","text":"measure_Δk!( measurement_container::NamedTuple, \n             detwf::DeterminantalWavefunction, \n             determinantal_parameters::DeterminantalParameters, \n             jastrow_parameters::JastrowParameters, \n             model_geometry::ModelGeometry, \n             Ne::Int64, \n             pht::Bool )::Nothing\n\nMeasures logarithmic derivatives for all variational parameters and then writes  them to the measurement container. The first 'p' are derivatives of determinantal  parameters and the rest are derivatives of Jastrow parameters. \n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_Δk!-Tuple{NamedTuple, DeterminantalWavefunction, DeterminantalParameters, ModelGeometry, Int64}","page":"API","title":"VariationalMC.measure_Δk!","text":"measure_Δk!( measurement_container::NamedTuple, \n             detwf::DeterminantalWavefunction, \n             determinantal_parameters::DeterminantalParameters, \n             model_geometry::ModelGeometry, \n             Ne::Int64 )::Nothing\n\nMeasures logarithmic derivatives for all variational parameters and then writes them to the measurement container. The first 'p' are derivatives of determinantal parameters.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_ΔkE!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, DeterminantalParameters, JastrowParameters, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.measure_ΔkE!","text":"measure_ΔkE!( measurement_container::NamedTuple, \n              detwf::DeterminantalWavefunction, \n              tight_binding_model::TightBindingModel, \n              determinantal_parameters::DeterminantalParameters, \n              jastrow_parameters::JastrowParameters, \n              model_geometry::ModelGeometry, \n              Ne::Int64, \n              pht::Bool )::Nothing\n\nMeasures the product of variational derivatives with the local energy and then  writes them to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_ΔkE!-Tuple{NamedTuple, DeterminantalWavefunction, TightBindingModel, DeterminantalParameters, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.measure_ΔkE!","text":"measure_ΔkE!( measurement_container::NamedTuple, \n              detwf::DeterminantalWavefunction, \n              tight_binding_model::TightBindingModel, \n              determinantal_parameters::DeterminantalParameters, \n              model_geometry::ModelGeometry, \n              Ne::Int64, \n              pht::Bool )::Nothing\n\nMeasures the product of variational derivatives with the local energy and then writes them to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction. \ntight_binding_model::TightBindingModel: parameter for a non-interacting tight-binding model.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_ΔkΔkp!-Tuple{NamedTuple, DeterminantalWavefunction, DeterminantalParameters, JastrowParameters, ModelGeometry, Int64, Bool}","page":"API","title":"VariationalMC.measure_ΔkΔkp!","text":"measure_ΔkΔkp!( measurement_container::NamedTuple, \n                detwf::DeterminantalWavefunction, \n                determinantal_parameters::DeterminantalParameters, \n                jastrow_parameters::JastrowParameters, \n                model_geometry::ModelGeometry, \n                Ne::Int64, \n                pht::Bool )::Nothing\n\nMeasures the product of variational derivatives with other variational derivatives and then writes them to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ndeterminantal_parameters::DeterminantalParameters: current set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.measure_ΔkΔkp!-Tuple{NamedTuple, DeterminantalWavefunction, DeterminantalParameters, ModelGeometry, Int64}","page":"API","title":"VariationalMC.measure_ΔkΔkp!","text":"measure_ΔkΔkp!( measurement_container::NamedTuple, \n                detwf::DeterminantalWavefunction, \n                determinantal_parameters::DeterminantalParameters,\n                model_geometry::ModelGeometry,\n                Ne::Int64 )::Nothing\n\nMeasures the product of variational derivatives with other variational derivatives and then writes them to the measurement container.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\ndeterminantal_parameters::DeterminantalParameters: current variational determinantal parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.metropolis_step-Tuple{DeterminantalWavefunction, Int64, Int64, Float64, ModelGeometry, Random.Xoshiro}","page":"API","title":"VariationalMC.metropolis_step","text":"metropolis_step( detwf::DeterminantalWavefunction, \n                 Ne::Int, \n                 n_stab_W::Int64, \n                 δW::Float64,\n                 model_geometry::ModelGeometry, \n                 rng::Xoshiro )::String\n\nProposes a particle to hop to a random neighboring site, and then accepts or rejects  using the Metropolis algorithm. \n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\nNe::Int: total number of electrons.\nn_stab_W::Int64: frequency of Green's function stabilization steps.\nδW::Float64: error threshold for the Green's function.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.metropolis_step-Tuple{DeterminantalWavefunction, JastrowFactor, JastrowParameters, Int64, Int64, Int64, Float64, Float64, ModelGeometry, Bool, Random.Xoshiro}","page":"API","title":"VariationalMC.metropolis_step","text":"metropolis_step( detwf::DeterminantalWavefunction, \n                 jastrow_factor::JastrowFactor, \n                 jastrow_parameters::JastrowParameters,\n                 Ne::Int, \n                 n_stab_W::Int64, \n                 n_stab_T::Int64, \n                 δW::Float64, \n                 δT::Float64, \n                 model_geometry::ModelGeometry, \n                 pht::Bool, \n                 rng::Xoshiro )::String\n\nProposes a particle to hop to a random neighboring site, and then accepts or rejects using the Metropolis algorithm. \n\ndetwf::DeterminantalWavefunction: current variational wavefunction.\njastrow_factor::JastrowFactor: current Jastrow factor.\njastrow_parameters::JastrowParameters: current set of Jastrow parameters.\nNe::Int: total number of electrons.\nn_stab_W: frequency of Green's function stabilization steps.\nn_stab_T: frequency of T vector stabilization steps.\nδW::Float64: error threshold for the Green's function.\nδT::Float64: error threshold for the T vector.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.model_summary-Tuple{}","page":"API","title":"VariationalMC.model_summary","text":"model_summary( ; n̄::Float64,\n               nup::Int,\n               ndn::Int,\n               simulation_info::SimulationInfo, \n               model_geometry::ModelGeometry, \n               tight_binding_model::TightBindingModel, \n               parameters::Tuple )::Nothing\n\nWrites model summary to file.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.propose_random_move-Tuple{Int64, Vector{Int64}, ModelGeometry, Random.Xoshiro}","page":"API","title":"VariationalMC.propose_random_move","text":"propose_random_move( Ne::Int64, \n                     pconfig::Vector{Int64}, \n                     model_geometry::ModelGeometry, \n                     rng::Xoshiro )::MarkovMove\n\nProposes randomly hopping or exchanging a particle from some intial site 'k' to a neighboring site 'l'  and returns an instance of the MarkovMove type. \n\nNe::Int64: total number of electrons.  \npconfig::Vector{Int64}: current particle configuration. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities. \nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.rank1_update!-Tuple{VariationalMC.MarkovMove, DeterminantalWavefunction}","page":"API","title":"VariationalMC.rank1_update!","text":"rank1_update!( markov_move::MarkovMove, \n               detwf::DeterminantalWavefunction )::Nothing\n\nPerforms and in-place rank-1 update of the equal-time Green's function. The default method  uses BLAS.geru!(). Also available is a DEBUG method which performs the update by hand.\n\nmarkov_move::MarkovMove: quantities related to a Markov move. \ndetwf::DeterminantalWavefunction: current variational wavefunction. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.readin_parameters-Tuple{String}","page":"API","title":"VariationalMC.readin_parameters","text":"readin_parameters( filename::String )\n\nParses standard file containing initial variational parameters. \n\nfilename::String: name of parameter file.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.recalculate_equal_time_greens!-Tuple{Matrix{ComplexF64}, Matrix{ComplexF64}, Matrix{ComplexF64}, Vector{Int64}, Int64}","page":"API","title":"VariationalMC.recalculate_equal_time_greens!","text":"recalculate_equal_time_greens( Wᵣ::Matrix{ComplexF64}, \n                               Dᵣ::Matrix{ComplexF64}, \n                               M::Matrix{ComplexF64}, \n                               pconfig::Vector{Int64}, \n                               Ne::Int64 )::Bool\n\nRecomputes the equal-time Green's function.\n\nWᵣ::Matrix{ComplexF64}: equal-time Green's function matrix.\nDᵣ::Matrix{ComplexF64}: Slater determinant matrix.\nM::Matrix{ComplexF64}: reduced U_int matrix.\npconfig::Vector{Int64}: current particle configuration.\nNe::Int64: total number of electrons. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.reduce_index_1d-Tuple{Int64, Int64, ModelGeometry}","page":"API","title":"VariationalMC.reduce_index_1d","text":"reduce_index_1d( i::Int, j::Int, model_geometry::ModelGeometry )\n\nReduces the indices of 2 lattice sites (i,j) to irreducible indices (0,k), where k is an integer.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.reduce_index_2d-Tuple{Int64, Int64, ModelGeometry}","page":"API","title":"VariationalMC.reduce_index_2d","text":"reduce_index_2d( i::Int, j::Int, model_geometry::ModelGeometry )\n\nReduces the indices of 2 lattice sites (i,j) to irreducible indices (0,k), where k is an integer.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.reset_measurements!-Tuple{Dict{String, Any}}","page":"API","title":"VariationalMC.reset_measurements!","text":"reset_measurements!( measurements::Dict{String, Any} )\n\nResets value of a dictionary (measurement container) to zero.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.save_simulation_info","page":"API","title":"VariationalMC.save_simulation_info","text":"save_simulation_info( sim_info::SimulationInfo, \n                      additional_info = nothing )::Nothing\n\nSave the contents sim_info to a TOML file, and add an optional additional table to the output file based on the contents of a dictionary additional_info.\n\n\n\n\n\n","category":"function"},{"location":"api/#VariationalMC.stochastic_reconfiguration!-Tuple{NamedTuple, DeterminantalParameters, Float64, Float64, Int64, Int64}","page":"API","title":"VariationalMC.stochastic_reconfiguration!","text":"stochastic_reconfiguration!( measurement_container::NamedTuple, \n                             determinantal_parameters::DeterminantalParameters, \n                             η::Float64, \n                             dt::Float64, \n                             bin::Int,\n                             bin_size::Int64 )::Nothing\n\nUpdates variational parameters through stochastic optimization.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nη::Float64: optimization stabilization factor. \ndt::Float64: optimization rate. \nbin::Int: current bin number.\nbin_size::Int64: length of the current bin. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.stochastic_reconfiguration!-Tuple{NamedTuple, DeterminantalParameters, JastrowParameters, Float64, Float64, Int64, Int64}","page":"API","title":"VariationalMC.stochastic_reconfiguration!","text":"stochastic_reconfiguration!( measurement_container::NamedTuple, \n                             determinantal_parameters::DeterminantalParameters, \n                             jastrow_parameters::JastrowParameters, \n                             η::Float64, \n                             dt::Float64, \n                             bin::Int, \n                             bin_size::Int64 )::Nothing\n\nUpdates variational parameters through stochastic optimization.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: set of Jastrow variational parameters. \nη::Float64: optimization stabilization factor. \ndt::Float64: optimization rate. \nbin::Int: current bin number.\nbin_size::Int64: length of the current bin. \n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.update_equal_time_greens!-Tuple{VariationalMC.MarkovMove, DeterminantalWavefunction, ModelGeometry, Int64, Int64, Float64}","page":"API","title":"VariationalMC.update_equal_time_greens!","text":"function update_equal_time_greens!( markov_move::MarkovMove, \n                                    detwf::DeterminantalWavefunction, \n                                    model_geometry::ModelGeometry,\n                                    Ne::Int64, \n                                    n_stab_W::Int64, \n                                    δW::Float64 )::Nothing\n\nUpdates the equal-time Green's function while performing a numerical stabilzation check. If the calculated  deviation exceeds the set threshold, then the current Green's function is replaced by one calculated from scratch.\n\nmarkov_move::MarkovMove: quantities related to a Markov move.\ndetwf::DeterminantalWavefunction: current variational wavefunction.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: total number of electrons.\nn_stab_W::Int64: frequency of Green's function stability steps.\nδW::Float64: Green's function stability threshold.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.update_fermionic_Tvec!-Tuple{VariationalMC.MarkovMove, Int64, JastrowParameters, JastrowFactor, ModelGeometry, Int64, Float64, Bool}","page":"API","title":"VariationalMC.update_fermionic_Tvec!","text":"update_fermionic_Tvec!( markov_move::MarkovMove, \n                        spin::Int64, \n                        jastrow_parameters::JastrowParameters,\n                        jastrow_factor::JastrowFactor, \n                        model_geometry::ModelGeometry, \n                        n_stab_T::Int64, \n                        δT::Float64, \n                        pht::Bool )::Nothing\n\nUpdates elements Tᵢ of the T vector after an accepted Metropolis step.\n\nmarkov_move::MarkovMove: quantities related to a Markov move. \nspin::Int64: spin of the current particle. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow::Jastrow: current Jastrow factor.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_T::Int64: frequency of T vector stabilization setps.\nδT::Float64: deviation threshold for the T vector.\npht::Bool: whether model is particle-hole transformed.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.update_parameters!-Tuple{AbstractVector, DeterminantalParameters, JastrowParameters}","page":"API","title":"VariationalMC.update_parameters!","text":"update_parameters!( new_vpars::AbstractVector, \n                    determinantal_parameters::DeterminantalParameters, \n                    jastrow_parameters::JastrowParameters )::Nothing\n\nUpdates variational (determinantal) parameters after Stochastic Reconfiguration.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.update_parameters!-Tuple{AbstractVector, DeterminantalParameters}","page":"API","title":"VariationalMC.update_parameters!","text":"update_parameters!( new_vpars::AbstractVector, \n                    determinantal_parameters::DeterminantalParameters )::Nothing\n\nUpdates variational (determinantal) parameters after Stochastic Reconfiguration.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.write_measurements!-Tuple{NamedTuple, Vector{Float64}, Vector{Float64}, Vector{Any}}","page":"API","title":"VariationalMC.write_measurements!","text":"write_measurements!( measurement_container::NamedTuple, \n                     energy_bin::Vector{Any}, \n                     dblocc_bin::Vector{Any}, \n                     param_bin::Vector{Any} )::Nothing\n\nDEBUG version of the write_measurements!() method. Will write binned energies, double occupancy, and parameters to specified vectors.  \n\nmeasurement_container::NamedTuple: container where measurements are stored.\nenergy_bin::Vector{Float64}: externally specified vector for storing energy measurements.\ndblocc_bin::Vector{Float64}: externally specified vector for storing double occupancy measurements.\nparam_bin::Vector{Any}: externally specified vector for storing parameter measurements.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.x-Tuple{Int64, ModelGeometry}","page":"API","title":"VariationalMC.x","text":"x( i::Int, model_geometry::ModelGeometry )\n\nConvenience function for obtaining the x-coordinate of a lattice site given a  lattice spindex.\n\n\n\n\n\n","category":"method"},{"location":"api/#VariationalMC.y-Tuple{Int64, ModelGeometry}","page":"API","title":"VariationalMC.y","text":"y( i::Int, model_geometry::ModelGeometry )\n\nConvenience function for obtaining the y-coordinate of a lattice site given a  lattice spindex.\n\n\n\n\n\n","category":"method"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To set up a VMC simulation ...","category":"page"},{"location":"#VariationalMC.jl","page":"Home","title":"VariationalMC.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VariationalMC.jl. This package impelments the variational Monte Carlo (VMC) method for Hubbard and electron-phonon interactions (coming soon).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code is currently the experimental stage of development. Use with caution. ","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of this code was supported by the U.S. Department of Energy, Office of Science, Office of Workforce Development for Teachers and Scientists, Office of Science Graduate Student Research (SCGSR) program. The SCGSR program is administered by the Oak Ridge Institute for Science and Education (ORISE) for the DOE. ORISE is managed by ORAU under contract number DE-SC0014664.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the VariationalMC.jl, simply open the Julia REPL and run the commands","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\npkg> add VariationalMC","category":"page"},{"location":"","page":"Home","title":"Home","text":"or equivalently via Pkg do","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"VariationalMC\")","category":"page"},{"location":"#Notable-External-Package-Dependencies","page":"Home","title":"Notable External Package Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This section reviews some notable package dependencies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LatticeUtilties.jl: Package that is used to represent arbitrary lattice geometries.\nOrderedCollections.jl: Package that implements associative containers that preserve the order of insertion.\nJLD2.jl: Package used to write data to binary files in an HDF5 compatible format. \nCSV.jl: Package used for handling delimited text data.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For questions and comments regarding this package, please email Andy Tanjaroon Ly at atanjaro@vols.utk.edu.","category":"page"}]
}
