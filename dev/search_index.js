var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#ModelGeometry-Type-and-Methods","page":"API","title":"ModelGeometry Type and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ModelGeometry","category":"page"},{"location":"api/#VariationalMC.ModelGeometry","page":"API","title":"VariationalMC.ModelGeometry","text":"ModelGeometry( unit_cell::UnitCell, \n               lattice::Lattice, \n               bond::Vector{Vector{Any}} )\n\nA type defining model geometry.\n\n\n\n\n\n","category":"type"},{"location":"api/#Parameters-Types-and-Methods","page":"API","title":"Parameters Types and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TightBindingModel\nSpinModel\nDeterminantalParameters\nJastrowParameters","category":"page"},{"location":"api/#VariationalMC.TightBindingModel","page":"API","title":"VariationalMC.TightBindingModel","text":"TightBindingModel( t₀::Float64,\n                   t₁::Float64 )\n\nA type defining a non-interacting tight binding model.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.SpinModel","page":"API","title":"VariationalMC.SpinModel","text":"SpinModel( J₁::Float64,\n           J₂::Float64,\n           J₃::Float64 )\n\nA type defining a spin model.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.DeterminantalParameters","page":"API","title":"VariationalMC.DeterminantalParameters","text":"DeterminantalParameters( pars::Vector{AbstractString}, \n                         vals::Vector{AbstractFloat}, \n                         num_detpars::Int )\n\nA type defining a set of variational parameters for the determinantal wavefunction.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.JastrowParameters","page":"API","title":"VariationalMC.JastrowParameters","text":"JastrowParameters( jastrow_type::String,\n                   jpar_map::OrderedDict{Any, Any},\n                   num_jpars::Int,\n                   num_jpar_opts::Int )\n\nA type defining quantities related to Jastrow variational parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#DeterminantalWavefunction-Type-and-Methods","page":"API","title":"DeterminantalWavefunction Type and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DeterminantalWavefunction\nget_determinantal_wavefunction","category":"page"},{"location":"api/#VariationalMC.DeterminantalWavefunction","page":"API","title":"VariationalMC.DeterminantalWavefunction","text":"DeterminantalWavefunction( W::Matrix{ComplexF64}, \n                           D::Matrix{ComplexF64}, \n                           M::Matrix{ComplexF64}\n                           U_int::Matrix{ComplexF64}, \n                           A::Vector{Any}, \n                           ε::Vector{Float64}, \n                           pconfig::Vector{Int64} )\n\nA type defining quantities related to a determinantal wavefunction.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.get_determinantal_wavefunction","page":"API","title":"VariationalMC.get_determinantal_wavefunction","text":"get_determinantal_wavefunction( tight_binding_model::TightBindingModel, \n                                determinantal_parameters::DeterminantalParameters, \n                                Ne::Int64, \n                                nup::Int64, \n                                ndn::Int64,\n                                model_geometry::ModelGeometry, \n                                rng::Xoshiro)::DeterminantalWavefunction\n\nConstructs a variational wavefunction based on parameters given by the tight binding model and determinantal parameters.  Returns an instances of the DeterminantalWavefunction type. If no particle configuration is specified, a random configuration will be generated.                            \n\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nNe::Int: total number of electrons.\nnup::Int: number of spin-up electrons.\nndn::Int: number of spin-down electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nrng::Xoshiro: random number.\npconfig::Union{Nothing, Vector{Int}}=nothing: current particle configuration. \n\n\n\n\n\n","category":"function"},{"location":"api/#Jastrow-Types-and-Methods","page":"API","title":"Jastrow Types and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"JastrowFactor\nget_jastrow_factor","category":"page"},{"location":"api/#VariationalMC.JastrowFactor","page":"API","title":"VariationalMC.JastrowFactor","text":"JastrowFactor( Tvec_f::Vector{Float64}, \n               Tvec_b::Vector{Float64} )\n\nA type defining quantities related to a Jastrow factor.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.get_jastrow_factor","page":"API","title":"VariationalMC.get_jastrow_factor","text":"get_jastrow_factor( jastrow_parameters::JastrowParameters, \n                    detwf::DeterminantalWavefunction, \n                    model_geometry::ModelGeometry, \n                    pht::Bool )::JastrowFactor\n\nConstructs specified Jastrow factor and returns a instance of the JastrowFactor type. \n\njastrow_parameters::JastrowParameters: current set of Jastrow parameters. \ndetwf::DeterminantalWavefunction: current variational wavefunction. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed. \n\n\n\n\n\n","category":"function"},{"location":"api/#Markov-Methods","page":"API","title":"Markov Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"local_fermion_update!","category":"page"},{"location":"api/#VariationalMC.local_fermion_update!","page":"API","title":"VariationalMC.local_fermion_update!","text":"local_fermion_update!( detwf::DeterminantalWavefunction,\n                       Ne::Int, \n                       model_geometry::ModelGeometry, \n                       pht::Bool, \n                       δW::Float64, \n                       δT::Float64, \n                       rng::Xoshiro )\n\nPerforms a local update to the electronic sector, with a certain number of equilibration steps.\n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\nNe::Int: total number of electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_W: frequency of Green's function stabilization steps.\nδW::Float64: error threshold for the Green's function.\nrng::Xoshiro: random number generator.\n\n\n\n\n\nlocal_fermion_update!( detwf::DeterminantalWavefunction, \n                       jastrow_factor::JastrowFactor, \n                       jastrow_parameters::JastrowParameters,\n                       Ne::Int, \n                       model_geometry::ModelGeometry, \n                       pht::Bool, \n                       δW::Float64, \n                       δT::Float64, \n                       rng::Xoshiro )\n\nPerforms a local update to the electronic sector, with a certain number of equilibration steps.\n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow::Jastrow: current Jastrow factor.\nNe::Int: total number of electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_W: frequency of Green's function stabilization steps.\nn_stab_T: frequency of T vector stabilization steps.\nδW::Float64: error threshold for the Green's function.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"function"},{"location":"api/#ParticleConfiguration-Types-and-Methods","page":"API","title":"ParticleConfiguration Types and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"get_particle_numbers\nget_particle_density","category":"page"},{"location":"api/#VariationalMC.get_particle_numbers","page":"API","title":"VariationalMC.get_particle_numbers","text":"get_particle_numbers( density::Float64 )::NTuple{4, Int64}\n\nGiven a particle density, returns the total number of particles Np, number of spin-up particles Npu,  number of spin-down particles Npd, and total number of electrons Ne.\n\ndensity::Float64: desired electronic density.\n\n\n\n\n\n","category":"function"},{"location":"api/#VariationalMC.get_particle_density","page":"API","title":"VariationalMC.get_particle_density","text":"get_particle_density( nup::Int64, \n                      ndn::Int64 )::Tuple{Float64, Int64, Int64}\n\nGiven the number of spin-up electrons nup, and number of spin-down electrons ndn, returns  the particle density, total number of particles Np, and the total number of electrons Ne.\n\nnup::Int: number of spin-up electrons.\nndn::Int: number of spin-down electrons.\n\n\n\n\n\n","category":"function"},{"location":"api/#Optimizer-Methods","page":"API","title":"Optimizer Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"stochastic_reconfiguration!","category":"page"},{"location":"api/#VariationalMC.stochastic_reconfiguration!","page":"API","title":"VariationalMC.stochastic_reconfiguration!","text":"stochastic_reconfiguration!( measurement_container::NamedTuple, \n                             determinantal_parameters::DeterminantalParameters, \n                             η::Float64, \n                             dt::Float64, \n                             bin::Int,\n                             bin_size::Int64 )::Nothing\n\nUpdates variational parameters through stochastic optimization.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nη::Float64: optimization stabilization factor. \ndt::Float64: optimization rate. \nbin::Int: current bin number.\nbin_size::Int64: length of the current bin. \n\n\n\n\n\nstochastic_reconfiguration!( measurement_container::NamedTuple, \n                             determinantal_parameters::DeterminantalParameters, \n                             jastrow_parameters::JastrowParameters, \n                             η::Float64, \n                             dt::Float64, \n                             bin::Int, \n                             bin_size::Int64 )::Nothing\n\nUpdates variational parameters through stochastic optimization.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: set of Jastrow variational parameters. \nη::Float64: optimization stabilization factor. \ndt::Float64: optimization rate. \nbin::Int: current bin number.\nbin_size::Int64: length of the current bin. \n\n\n\n\n\n","category":"function"},{"location":"api/#Measurement-Methods","page":"API","title":"Measurement Methods","text":"","category":"section"},{"location":"api/#Intitialize-Measurements","page":"API","title":"Intitialize Measurements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"initialize_measurement_container\ninitialize_measurement_directories","category":"page"},{"location":"api/#VariationalMC.initialize_measurement_container","page":"API","title":"VariationalMC.initialize_measurement_container","text":"initialize_measurement_container( N_opts::Int, \n                                  opt_bin_size::Int, \n                                  N_bins::Int, \n                                  bin_size::Int,\n                                  determinantal_parameters::DeterminantalParameters, \n                                  model_geometry::ModelGeometry )::NamedTuple\n\nInitializes a set of dictionaries containing generic arrays for storing measurements. Each dictionary in the container has [keys => values] of the form: [observable name => (local value(s), current bin value(s))] \n\nN_opts::Int: number of optimization updates.\nopt_bin_size::Int: length of an optimization bin.\nN_bins::Int: number of simulation bins.\nbin_size::Int: length of a simulation bin. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\ninitialize_measurement_container( N_opts::Int, \n                                  opt_bin_size::Int, \n                                  N_bins::Int, \n                                  bin_size::Int,\n                                  determinantal_parameters::DeterminantalParameters, \n                                  jastrow_parameters::JastrowParameters,\n                                  model_geometry::ModelGeometry )::NamedTuple\n\nInitializes a set of dictionaries containing generic arrays for storing measurements. Each dictionary in the container has [keys => values] of the form: [observable name => (local value(s), current bin value(s))] \n\nN_opts::Int: number of optimization updates.\nopt_bin_size::Int: length of an optimization bin.\nN_bins::Int: number of simulation bins.\nbin_size::Int: length of a simulation bin. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: set of Jastrow variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"function"},{"location":"api/#VariationalMC.initialize_measurement_directories","page":"API","title":"VariationalMC.initialize_measurement_directories","text":"initialize_measurement_directories( simulation_info::SimulationInfo, \n                                    measurement_container::NamedTuple )::Nothing\n\nCreates file directories and subdirectories for storing measurements. \n\nsimulation_info::SimulationInfo: contains datafolder information.\nmeasurement_container::NamedTuple: container where measurements are contained.\n\n\n\n\n\n","category":"function"},{"location":"api/#Make-Measurements","page":"API","title":"Make Measurements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"make_measurements!","category":"page"},{"location":"api/#VariationalMC.make_measurements!","page":"API","title":"VariationalMC.make_measurements!","text":"make_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel,\n                    determinantal_parameters::DeterminantalParameters,\n                    optimize::NamedTuple, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )::Nothing\n\nMeasures global, optimization, and simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\nmake_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel,\n                    determinantal_parameters::DeterminantalParameters,\n                    jastrow_parameters::JastrowParameters,\n                    jastrow_factor::JastrowFactor, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )::Nothing\n\nMeasures global, optimization, and simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\nmake_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )\n\nMeasures simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hoel transformed.\n\n\n\n\n\nmake_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel, \n                    jastrow_parameters::JastrowParameters,\n                    jastrow_factor::JastrowFactor, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )\n\nMeasures simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\n","category":"function"},{"location":"api/#Write-Measurements","page":"API","title":"Write Measurements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"write_measurements!","category":"page"},{"location":"api/#VariationalMC.write_measurements!","page":"API","title":"VariationalMC.write_measurements!","text":"write_measurements!( measurement_container::NamedTuple, \n                     energy_bin::Vector{Any}, \n                     dblocc_bin::Vector{Any}, \n                     param_bin::Vector{Any} )::Nothing\n\nDEBUG version of the write_measurements!() method. Will write binned energies, double occupancy, and parameters to specified vectors.  \n\nmeasurement_container::NamedTuple: container where measurements are stored.\nenergy_bin::Vector{Float64}: externally specified vector for storing energy measurements.\ndblocc_bin::Vector{Float64}: externally specified vector for storing double occupancy measurements.\nparam_bin::Vector{Any}: externally specified vector for storing parameter measurements.\n\n\n\n\n\n","category":"function"},{"location":"api/#Process-Measurements","page":"API","title":"Process Measurements","text":"","category":"section"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"To set up a VMC simulation ...","category":"page"},{"location":"#VariationalMC.jl","page":"Home","title":"VariationalMC.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VariationalMC.jl. This package impelments the variational Monte Carlo (VMC) method for Hubbard and electron-phonon interactions (coming soon).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code is currently the experimental stage of development. Use with caution. ","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of this code was supported by the U.S. Department of Energy, Office of Science, Office of Workforce Development for Teachers and Scientists, Office of Science Graduate Student Research (SCGSR) program. The SCGSR program is administered by the Oak Ridge Institute for Science and Education (ORISE) for the DOE. ORISE is managed by ORAU under contract number DE-SC0014664.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the VariationalMC.jl, simply open the Julia REPL and run the commands","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\npkg> add VariationalMC","category":"page"},{"location":"","page":"Home","title":"Home","text":"or equivalently via Pkg do","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"VariationalMC\")","category":"page"},{"location":"#Notable-External-Package-Dependencies","page":"Home","title":"Notable External Package Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This section reviews some notable package dependencies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LatticeUtilties.jl: Package that is used to represent arbitrary lattice geometries.\nOrderedCollections.jl: Package that implements associative containers that preserve the order of insertion.\nJLD2.jl: Package used to write data to binary files in an HDF5 compatible format. \nCSV.jl: Package used for handling delimited text data.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For questions and comments regarding this package, please email Andy Tanjaroon Ly at atanjaro@vols.utk.edu.","category":"page"}]
}
