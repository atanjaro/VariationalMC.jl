var documenterSearchIndex = {"docs":
[{"location":"api/#API","page":"API","title":"API","text":"","category":"section"},{"location":"api/#ModelGeometry-Type-and-Methods","page":"API","title":"ModelGeometry Type and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"ModelGeometry","category":"page"},{"location":"api/#VariationalMC.ModelGeometry","page":"API","title":"VariationalMC.ModelGeometry","text":"ModelGeometry( unit_cell::UnitCell, \n               lattice::Lattice, \n               bond::Vector{Vector{Any}} )\n\nA type defining model geometry.\n\n\n\n\n\n","category":"type"},{"location":"api/#Parameters-Types-and-Methods","page":"API","title":"Parameters Types and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"TightBindingModel\nSpinModel\nDeterminantalParameters\nJastrowParameters","category":"page"},{"location":"api/#VariationalMC.TightBindingModel","page":"API","title":"VariationalMC.TightBindingModel","text":"TightBindingModel( t₀::Float64,\n                   t₁::Float64 )\n\nA type defining a non-interacting tight binding model.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.SpinModel","page":"API","title":"VariationalMC.SpinModel","text":"SpinModel( J₁::Float64,\n           J₂::Float64,\n           J₃::Float64 )\n\nA type defining a spin model.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.DeterminantalParameters","page":"API","title":"VariationalMC.DeterminantalParameters","text":"DeterminantalParameters( pars::Vector{AbstractString}, \n                         vals::Vector{AbstractFloat}, \n                         num_detpars::Int )\n\nA type defining a set of variational parameters for the determinantal wavefunction.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.JastrowParameters","page":"API","title":"VariationalMC.JastrowParameters","text":"JastrowParameters( jastrow_type::String,\n                   jpar_map::OrderedDict{Any, Any},\n                   num_jpars::Int,\n                   num_jpar_opts::Int )\n\nA type defining quantities related to Jastrow variational parameters.\n\n\n\n\n\n","category":"type"},{"location":"api/#DeterminantalWavefunction-Type-and-Methods","page":"API","title":"DeterminantalWavefunction Type and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"DeterminantalWavefunction\nget_determinantal_wavefunction","category":"page"},{"location":"api/#VariationalMC.DeterminantalWavefunction","page":"API","title":"VariationalMC.DeterminantalWavefunction","text":"DeterminantalWavefunction( W::Matrix{ComplexF64}, \n                           D::Matrix{ComplexF64}, \n                           M::Matrix{ComplexF64}\n                           U_int::Matrix{ComplexF64}, \n                           A::Vector{Any}, \n                           ε::Vector{Float64}, \n                           pconfig::Vector{Int64} )\n\nA type defining quantities related to a determinantal wavefunction.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.get_determinantal_wavefunction","page":"API","title":"VariationalMC.get_determinantal_wavefunction","text":"get_determinantal_wavefunction( tight_binding_model::TightBindingModel, \n                                determinantal_parameters::DeterminantalParameters, \n                                Ne::Int64, \n                                nup::Int64, \n                                ndn::Int64,\n                                model_geometry::ModelGeometry, \n                                rng::Xoshiro)::DeterminantalWavefunction\n\nConstructs a variational wavefunction based on parameters given by the tight binding model and determinantal parameters.  Returns an instances of the DeterminantalWavefunction type. If no particle configuration is specified, a random configuration will be generated.                            \n\ntight_binding_model::TightBindingModel: parameters for a non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\noptimize::NamedTuple: field of optimization flags.\nNe::Int: total number of electrons.\nnup::Int: number of spin-up electrons.\nndn::Int: number of spin-down electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nrng::Xoshiro: random number.\npconfig::Union{Nothing, Vector{Int}}=nothing: current particle configuration. \n\n\n\n\n\n","category":"function"},{"location":"api/#Jastrow-Types-and-Methods","page":"API","title":"Jastrow Types and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"JastrowFactor\nget_jastrow_factor","category":"page"},{"location":"api/#VariationalMC.JastrowFactor","page":"API","title":"VariationalMC.JastrowFactor","text":"JastrowFactor( Tvec_f::Vector{Float64}, \n               Tvec_b::Vector{Float64} )\n\nA type defining quantities related to a Jastrow factor.\n\n\n\n\n\n","category":"type"},{"location":"api/#VariationalMC.get_jastrow_factor","page":"API","title":"VariationalMC.get_jastrow_factor","text":"get_jastrow_factor( jastrow_parameters::JastrowParameters, \n                    detwf::DeterminantalWavefunction, \n                    model_geometry::ModelGeometry, \n                    pht::Bool )::JastrowFactor\n\nConstructs specified Jastrow factor and returns a instance of the JastrowFactor type. \n\njastrow_parameters::JastrowParameters: current set of Jastrow parameters. \ndetwf::DeterminantalWavefunction: current variational wavefunction. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\npht::Bool: whether model is particle-hole transformed. \n\n\n\n\n\n","category":"function"},{"location":"api/#Markov-Methods","page":"API","title":"Markov Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"local_fermion_update!","category":"page"},{"location":"api/#VariationalMC.local_fermion_update!","page":"API","title":"VariationalMC.local_fermion_update!","text":"local_fermion_update!( detwf::DeterminantalWavefunction,\n                       Ne::Int, \n                       model_geometry::ModelGeometry, \n                       pht::Bool, \n                       δW::Float64, \n                       δT::Float64, \n                       rng::Xoshiro )\n\nPerforms a local update to the electronic sector, with a certain number of equilibration steps.\n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\nNe::Int: total number of electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_W: frequency of Green's function stabilization steps.\nδW::Float64: error threshold for the Green's function.\nrng::Xoshiro: random number generator.\n\n\n\n\n\nlocal_fermion_update!( detwf::DeterminantalWavefunction, \n                       jastrow_factor::JastrowFactor, \n                       jastrow_parameters::JastrowParameters,\n                       Ne::Int, \n                       model_geometry::ModelGeometry, \n                       pht::Bool, \n                       δW::Float64, \n                       δT::Float64, \n                       rng::Xoshiro )\n\nPerforms a local update to the electronic sector, with a certain number of equilibration steps.\n\ndetwf::DeterminantalWavefunction: current determinantal variational wavefunction.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow::Jastrow: current Jastrow factor.\nNe::Int: total number of electrons.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nn_stab_W: frequency of Green's function stabilization steps.\nn_stab_T: frequency of T vector stabilization steps.\nδW::Float64: error threshold for the Green's function.\nrng::Xoshiro: random number generator.\n\n\n\n\n\n","category":"function"},{"location":"api/#ParticleConfiguration-Types-and-Methods","page":"API","title":"ParticleConfiguration Types and Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"get_particle_numbers\nget_particle_density","category":"page"},{"location":"api/#VariationalMC.get_particle_numbers","page":"API","title":"VariationalMC.get_particle_numbers","text":"get_particle_numbers( density::Float64 )::NTuple{4, Int64}\n\nGiven a particle density, returns the total number of particles Np, number of spin-up particles Npu,  number of spin-down particles Npd, and total number of electrons Ne.\n\ndensity::Float64: desired electronic density.\n\n\n\n\n\n","category":"function"},{"location":"api/#VariationalMC.get_particle_density","page":"API","title":"VariationalMC.get_particle_density","text":"get_particle_density( nup::Int64, \n                      ndn::Int64 )::Tuple{Float64, Int64, Int64}\n\nGiven the number of spin-up electrons nup, and number of spin-down electrons ndn, returns  the particle density, total number of particles Np, and the total number of electrons Ne.\n\nnup::Int: number of spin-up electrons.\nndn::Int: number of spin-down electrons.\n\n\n\n\n\n","category":"function"},{"location":"api/#Optimizer-Methods","page":"API","title":"Optimizer Methods","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"stochastic_reconfiguration!","category":"page"},{"location":"api/#VariationalMC.stochastic_reconfiguration!","page":"API","title":"VariationalMC.stochastic_reconfiguration!","text":"stochastic_reconfiguration!( measurement_container::NamedTuple, \n                             determinantal_parameters::DeterminantalParameters, \n                             η::Float64, \n                             dt::Float64, \n                             bin::Int,\n                             bin_size::Int64 )::Nothing\n\nUpdates variational parameters through stochastic optimization.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nη::Float64: optimization stabilization factor. \ndt::Float64: optimization rate. \nbin::Int: current bin number.\nbin_size::Int64: length of the current bin. \n\n\n\n\n\nstochastic_reconfiguration!( measurement_container::NamedTuple, \n                             determinantal_parameters::DeterminantalParameters, \n                             jastrow_parameters::JastrowParameters, \n                             η::Float64, \n                             dt::Float64, \n                             bin::Int, \n                             bin_size::Int64 )::Nothing\n\nUpdates variational parameters through stochastic optimization.\n\nmeasurement_container::NamedTuple: container where measurements are stored. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: set of Jastrow variational parameters. \nη::Float64: optimization stabilization factor. \ndt::Float64: optimization rate. \nbin::Int: current bin number.\nbin_size::Int64: length of the current bin. \n\n\n\n\n\n","category":"function"},{"location":"api/#Measurement-Methods","page":"API","title":"Measurement Methods","text":"","category":"section"},{"location":"api/#Intitialize-Measurements","page":"API","title":"Intitialize Measurements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"initialize_measurement_container\ninitialize_measurement_directories","category":"page"},{"location":"api/#VariationalMC.initialize_measurement_container","page":"API","title":"VariationalMC.initialize_measurement_container","text":"initialize_measurement_container( N_opts::Int, \n                                  opt_bin_size::Int, \n                                  N_bins::Int, \n                                  bin_size::Int,\n                                  determinantal_parameters::DeterminantalParameters, \n                                  model_geometry::ModelGeometry )::NamedTuple\n\nInitializes a set of dictionaries containing generic arrays for storing measurements. Each dictionary in the container has [keys => values] of the form: [observable name => (local value(s), current bin value(s))] \n\nN_opts::Int: number of optimization updates.\nopt_bin_size::Int: length of an optimization bin.\nN_bins::Int: number of simulation bins.\nbin_size::Int: length of a simulation bin. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\ninitialize_measurement_container( N_opts::Int, \n                                  opt_bin_size::Int, \n                                  N_bins::Int, \n                                  bin_size::Int,\n                                  determinantal_parameters::DeterminantalParameters, \n                                  jastrow_parameters::JastrowParameters,\n                                  model_geometry::ModelGeometry )::NamedTuple\n\nInitializes a set of dictionaries containing generic arrays for storing measurements. Each dictionary in the container has [keys => values] of the form: [observable name => (local value(s), current bin value(s))] \n\nN_opts::Int: number of optimization updates.\nopt_bin_size::Int: length of an optimization bin.\nN_bins::Int: number of simulation bins.\nbin_size::Int: length of a simulation bin. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: set of Jastrow variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\n\n\n\n\n\n","category":"function"},{"location":"api/#VariationalMC.initialize_measurement_directories","page":"API","title":"VariationalMC.initialize_measurement_directories","text":"initialize_measurement_directories( simulation_info::SimulationInfo, \n                                    measurement_container::NamedTuple )::Nothing\n\nCreates file directories and subdirectories for storing measurements. \n\nsimulation_info::SimulationInfo: contains datafolder information.\nmeasurement_container::NamedTuple: container where measurements are contained.\n\n\n\n\n\n","category":"function"},{"location":"api/#Make-Measurements","page":"API","title":"Make Measurements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"make_measurements!","category":"page"},{"location":"api/#VariationalMC.make_measurements!","page":"API","title":"VariationalMC.make_measurements!","text":"make_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel,\n                    determinantal_parameters::DeterminantalParameters,\n                    optimize::NamedTuple, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )::Nothing\n\nMeasures global, optimization, and simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\nmake_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel,\n                    determinantal_parameters::DeterminantalParameters,\n                    jastrow_parameters::JastrowParameters,\n                    jastrow_factor::JastrowFactor, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )::Nothing\n\nMeasures global, optimization, and simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \ndeterminantal_parameters::DeterminantalParameters: set of determinantal variational parameters.\njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\nmake_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )\n\nMeasures simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hoel transformed.\n\n\n\n\n\nmake_measurements!( measurement_container::NamedTuple, \n                    detwf::DeterminantalWavefunction, \n                    tight_binding_model::TightBindingModel, \n                    jastrow_parameters::JastrowParameters,\n                    jastrow_factor::JastrowFactor, \n                    model_geometry::ModelGeometry, \n                    Ne::Int64, \n                    pht::Bool )\n\nMeasures simulation observables.\n\nmeasurement_container::NamedTuple: container where measurements are stored.\ndetwf::DeterminantalWavefunction: current determinantal wavefunction.\ntight_binding_model::TightBindingModel: non-interacting tight-binding model. \njastrow_parameters::JastrowParameters: current set of Jastrow variational parameters.\njastrow_factor::JastrowFactor: current Jastrow factor. \nmodel_geometry::ModelGeometry: contains unit cell and lattice quantities.\nNe::Int64: number of electrons.\npht::Bool: whether or not model is particle-hole transformed.\n\n\n\n\n\n","category":"function"},{"location":"api/#Write-Measurements","page":"API","title":"Write Measurements","text":"","category":"section"},{"location":"api/","page":"API","title":"API","text":"write_measurements!","category":"page"},{"location":"api/#VariationalMC.write_measurements!","page":"API","title":"VariationalMC.write_measurements!","text":"write_measurements!( measurement_container::NamedTuple, \n                     energy_bin::Vector{Any}, \n                     dblocc_bin::Vector{Any}, \n                     param_bin::Vector{Any} )::Nothing\n\nDEBUG version of the write_measurements!() method. Will write binned energies, double occupancy, and parameters to specified vectors.  \n\nmeasurement_container::NamedTuple: container where measurements are stored.\nenergy_bin::Vector{Float64}: externally specified vector for storing energy measurements.\ndblocc_bin::Vector{Float64}: externally specified vector for storing double occupancy measurements.\nparam_bin::Vector{Any}: externally specified vector for storing parameter measurements.\n\n\n\n\n\n","category":"function"},{"location":"api/#Process-Measurements","page":"API","title":"Process Measurements","text":"","category":"section"},{"location":"usage/#Usage","page":"Usage","title":"Usage","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"Here are a few example usage cases. ","category":"page"},{"location":"usage/#Hubbard-chain","page":"Usage","title":"Hubbard chain","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In the first example, we will work though simulating the repulsive Hubbard model  on a 1D chain at half-filling. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The Hubbard Hamiltonian for a 1D chain is given by ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"hatH = -t sum_i sigma (hatc^dagger_i+1sigmahatc^phantom dagger_i sigma + rm hc)\n+ U sum_i hatn_i uparrowhatn_i downarrow - mu sum_i sigma hatn_i sigma","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"where hatc^dagger_i sigma  (hatc^phantom dagger_i sigma) creates (annihilates) a spin sigma electron on site i in the lattice, and hatn_i sigma = hatc^dagger_i sigma hatc^phantom dagger_i sigma is the spin-sigma electron number operator for site i. In the above Hamiltonian t is the nearest neighbor hopping integral and U  0 controls the strength of the on-site Hubbard repulsion. Lastly, we consider the case that the system is half-filled and particle-hole symmetric, which occurs when when the chemical potential is zero, mu = 00.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Suppose we want to simulate a half-filled Hubbard chain (mu = 00) of length L=4 with U=10 with a Neél   antiferromagnet trial wavefunction and a density-density Jastrow factor.. This is accomplished by running the script associated with this example using the command","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"> julia hubbard_chain.jl 1 4 1.0 2 2 300 1000 2000 100","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Below you will find a heavily commented script that includes details on what each part of the code is doing.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# Import the required packages\nusing LinearAlgebra\nusing Random\nusing Printf\n\nusing LatticeUtilities\nusing VariationalMC\n\n# We define a top-level function for running the VMC simulation.\n# Note that the arguments of this function correspond to the command line\n# arguments used to run this script.\nfunction run_hubbard_chain_simulation(\n    sID, \n    L,\n    U,\n    nup,\n    ndn,\n    N_equil,\n    N_opts,\n    N_updates,\n    N_bins; \n    filepath=\".\"\n)\n    # DEBUG flag which writes information to terminal during the simulation.\n    # For efficeincy, this should always be turned off. \n    debug = false\n\n    # Select which parameters in the variational wavefunction will be optimized.\n    optimize = (\n        # local s-wave pairing\n        Δ_0 = false,\n        # spin-x (in-plane magnetization)\n        Δ_sx = false,\n        # spin-z (out-of-plane magnetization)\n        Δ_sz = true,\n        # (BCS) chemical potential\n        μ = false,\n        # uniform charge density \n        Δ_cdw = false\n    )\n\n    # Specify whether the model will be particle-hole transformed.\n    # Note that this is required if adding pair fields to the wavefunction.\n    pht = false\n\n    # Construct the foldername the data will be written.\n    df_prefix = @sprintf \"hubbard_chain_U%.2f_nup%.2f_ndn%.2f_L%d_opt\" U, nup, ndn, L\n\n    # Append optimized parameter names to the foldername.\n    datafolder_prefix = create_datafolder_prefix(optimize, df_prefix)\n\n    # Initialize an instance of the SimulationInfo type.\n    # This type tracks of where the data is written, as well as \n    # which version of Julia and VariationalMC are used in the script. \n    simulation_info = SimulationInfo(\n        filepath = filepath, \n        datafolder_prefix = datafolder_prefix,\n        sID = sID\n    )\n\n    # Initialize the directory the data will be written.\n    initialize_datafolder(simulation_info)\n\n    # Initialize a random number generator that will be used throughout the simulation.\n    # We seed this function with a randomly sampled number for the\n    # global random number generator.\n    seed = abs(rand(Int))\n    rng = Xoshiro(seed)\n\n    # Set the optimization rate for the VMC simulation.\n    dt = 0.03     \n\n    # Set the stabilization factor used in parameter optimization. \n    η = 1e-4    \n\n    # Set the frequency in Monte Carlo steps with which the equal-time Green's function\n    # matrix will be recomputed using the numerical stabilization procedure.\n    n_stab_W = 50\n\n    # Specify the maximum allowed error in the equal-time Green's function matrix that\n    # is corrected by numerical stabilization.\n    δW = 1e-3\n\n    # Specify the optimization bin size.\n    # The optimization bin size if the number of measurments that are averaged over each time data\n    # is written to file during optimization. \n    opt_bin_size = 3000\n\n    # Calculate the simulation bin size.\n    # The bin size is the number of measurements that are averaged over each time data is written\n    # to file during the simulation.\n    bin_size = div(N_updates, N_bins)\n\n    # Initialize a dictionary to store additional information about the simulation.\n    # This is a sort of \"notebook\" for tracking extraneous parameters during the VMC simulation.\n    metadata = Dict()\n    metadata[\"N_equil\"] = N_equil\n    metadata[\"N_opts\"] = N_opts\n    metadata[\"N_updates\"] = N_updates\n    metadata[\"N_bins\"] = N_bins\n    metadata[\"seed\"] = seed\n    metadata[\"pht\"] = true\n    metadata[\"δW\"] = δW\n    metadata[\"dt\"] = dt \n    metadata[\"opt_flags\"] = optimize \n    metadata[\"avg_acceptance_rate\"] = 0.0\n    metadata[\"opt_time\"] = 0.0\n    metadata[\"sim_time\"] = 0.0\n    metadata[\"total_time\"] = 0.0\n\n    #######################\n    ### DEFINE THE MODEL ##\n    #######################\n\n    # Initialize an instance of the UnitCell type.\n    # This struct defines the UnitCell.\n    unit_cell = UnitCell(\n        lattice_vecs = [[1.0]],\n        basis_vecs   = [[0.0]]\n    )\n\n    # Initialize an instance of the Lattice type.\n    # The struct describes the size of the finite periodic lattice to be simulated.\n    # Note that the current version of LatticeUtilities requires \n    # periodic boundary conditions be used.\n    lattice = Lattice(\n        [L], \n        [true]\n    )\n\n    # Define the nearest neighbor bond for a 1D chain.\n    bond_x = Bond(\n        orbitals = (1,1), \n        displacement = [1]\n    )\n\n    # Define the next-nearest neighbor bonds for a 1D chain.\n    bond_xp = Bond(\n        orbitals = (1,1), \n        displacement = [2]\n    )\n\n    # Collect all bond definitions into a single vector.\n    # Note that this has the structure [[nearest],[next-nearest]].\n    bonds = [[bond_x], [bond_xp]]\n    \n    # Initialize an instance of the ModelGeometry type.\n    # This type helps keep track of all the relevant features of the lattice\n    # geometry being simulated, including the defintion of the unit cell,\n    # the size of the finite periodic lattice, and all the relevant\n    # bond defintions that may arise in the model.\n    model_geometry = ModelGeometry(\n        unit_cell, \n        lattice, \n        bonds\n    )\n\n    ##############################\n    ### INITIALIZE MEASUREMENTS ##\n    ##############################\n\n    # Initialize the container that measurements will be accumulated into.\n    measurement_container = initialize_measurement_container(\n        N_opts, \n        opt_bin_size, \n        N_bins, \n        bin_size,\n        determinantal_parameters,\n        model_geometry\n    )\n\n    # Initialize the sub-directories to which the various measurements will be written.\n    initialize_measurement_directories(\n        simulation_info, \n        measurement_container\n    )\n\n    ############################\n    ### SET-UP VMC SIMULATION ##\n    ############################\n\n    # Determine the total particle density in the canonical ensemble. \n    (density, Np, Ne) = get_particle_density(nup, ndn)\n\n    # Define the nearest neighbor hopping amplitude, setting the energy scale of the system. \n    t = 1.0;\n\n    # Define the next-nearest neighbor hopping amplitude.\n    tp = 0.0;\n\n    # Define the non-interacting tight binding model.\n    tight_binding_model = TightBindingModel(t, tp)\n\n    # Specify the minimum value of each variational parameter.\n    # Note that this is done to avoid open shell issues.\n    minabs_vpar = 1e-4;\n\n    # Initialize determinantal variational parameters.\n    determinantal_parameters = DeterminantalParameters(\n        optimize, \n        tight_binding_model, \n        model_geometry, \n        minabs_vpar, \n        Ne, \n        pht\n    )\n\n    # Initialize the (fermionic) particle configuration cache.\n    pconfig_cache = nothing\n\n    ###########################\n    ### OPTIMIZATION UPDATES ##\n    ###########################\n\n    # Record start time for optimization. \n    opt_start_time = time()\n\n    # Iterate over optimization updates.\n    for bin in 1:N_opts\n\n        # Initialize the determinantal wavefunction.\n        detwf = get_determinantal_wavefunction(\n            tight_binding_model, \n            determinantal_parameters, \n            optimize, \n            Ne, \n            nup, \n            ndn, \n            model_geometry, \n            rng,\n            pconfig_cache\n        )   \n\n        # Iterate over equilibration/thermalization updates.\n        for step in 1:N_equil \n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf) = local_fermion_update!(\n                detwf, \n                Ne, \n                model_geometry, \n                n_stab_W,\n                δW, \n                rng\n            )\n\n            # Record the acceptance rate for attempted local updates of the particle configuration.                                                         \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n        end\n\n        # Iterate over the number of optimization bins.\n        for n in 1:opt_bin_size\n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf) = local_fermion_update!(\n                detwf, \n                Ne, \n                model_geometry, \n                n_stab_W,\n                δW, \n                rng\n            ) \n                                                                                                        \n            # Record the acceptance rate for attempted local updates of the particle configuration                                                       \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n            \n            # Make measurements, with results being recorded in the measurement container. \n            make_measurements!(\n                measurement_container, \n                detwf, \n                tight_binding_model, \n                determinantal_parameters, \n                model_geometry, \n                Ne, \n                pht\n            )\n\n            # Write measurement for the current bin to file.\n            write_measurements!(\n                bin, \n                n, \n                measurement_container, \n                simulation_info\n            )\n        end\n\n        # Record the last particle configuration used in the current bin. \n        pconfig_cache = detwf.pconfig\n\n        # Process the measurement results, calculating error bars for all measurements. \n        # process_measurements(simulation_info, opt_bin_size)\n\n        # Attempt an update to the variational parameters using the Stochastic Reconfiguration procedure. \n        stochastic_reconfiguration!( \n            measurement_container,  \n            determinantal_parameters, \n            η, \n            dt, \n            bin, \n            opt_bin_size\n        )  \n    end     \n\n    # Record end time for optimization.\n    opt_end_time = time()\n\n    # Calculate the total time for optimization. \n    metadata[\"opt_time\"] += opt_end_time - opt_start_time\n\n    #########################\n    ### SIMULATION UPDATES ##\n    #########################\n\n    # Record start time for the simulation.\n    sim_start_time = time()\n\n    # Iterate over simulation updates.\n    for bin in 1:N_updates\n\n        # Initialize the determinantal wavefunction.\n        detwf = get_determinantal_wavefunction(\n            tight_binding_model, \n            determinantal_parameters, \n            optimize, \n            Ne, \n            nup, \n            ndn, \n            model_geometry, \n            rng,\n            pconfig_cache\n        )   \n\n        # Iterate over equilibration/thermalization updates.\n        for step in 1:N_equil \n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf) = local_fermion_update!(\n                detwf, \n                Ne, \n                model_geometry, \n                n_stab_W,\n                δW, \n                rng\n            )\n\n            # Record the acceptance rate for attempted local updates of the particle configuration.                                                         \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n        end\n\n        # Iterate over the number of simulation bins.\n        for n in 1:bin_size\n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf) = local_fermion_update!(\n                detwf, \n                Ne, \n                model_geometry, \n                n_stab_W,\n                δW, \n                rng\n            ) \n                                                                                                        \n            # Record the acceptance rate for attempted local updates of the particle configuration                                                       \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n            \n            # Make measurements, with results being recorded in the measurement container. \n            make_measurements!(\n                measurement_container, \n                detwf, \n                tight_binding_model, \n                determinantal_parameters, \n                model_geometry, \n                Ne, \n                pht\n            )\n\n            # Write measurement for the current bin to file.\n            write_measurements!(\n                bin, \n                n, \n                measurement_container, \n                simulation_info\n            )\n        end\n\n        # Record the last particle configuration used in the current bin. \n        pconfig_cache = detwf.pconfig\n\n        # Process the measurement results, calculating error bars for all measurements. \n        # process_measurements(simulation_info, bin_size)\n    end     \n\n    # Record end time for the simulation. \n    sim_end_time = time()\n\n    # Calculate total time for the simulation. \n    metadata[\"sim_time\"] += sim_end_time - sim_start_time\n\n    # Record the total runtime.\n    metadata[\"total_time\"] += metadata[\"opt_time\"] + metadata[\"sim_time\"]\n\n    # # Write simulation summary TOML file.\n    # save_simulation_info(simulation_info, metadata)\n\n    return nothing\nend \n\n# Only execute if the script is run directly from the command line.\nif abspath(PROGRAM_FILE) == @__FILE__\n\n    # Read in the command line arguments.\n    sID = parse(Int, ARGS[1]) # simulation ID\n    L = parse(Int, ARGS[2])\n    U = parse(Float64, ARGS[3])\n    nup = parse(Int, ARGS[4])\n    ndn = parse(Int, ARGS[5])\n    N_equil = parse(Int, ARGS[6])\n    N_opts = parse(Int, ARGS[7])\n    N_updates = parse(Int, ARGS[8])\n    N_bins = parse(Int, ARGS[9])\n\n    # Run the simulation.\n    run_hubbard_chain_simulation(sID, L, U, nup, ndn, N_equil, N_opts, N_updates, N_bins)\nend","category":"page"},{"location":"usage/#Hubbard-chain-with-MPI-(experimental)","page":"Usage","title":"Hubbard chain with MPI (experimental)","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this example we simulate the same system as in example 1, the half-filled Hubbard chain. However in this case, we use a BCS trial wavefunction with a density-density Jastrow factor. A short tes simulation using  this script associated with this example can be run as","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"> mpiexecjl -n 8 julia hubbard_chain_mpi.jl 1 4 1.0 2 2 300 1000 2000 100","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"(The script is forthcoming.)","category":"page"},{"location":"usage/#Hubbard-chain-with-Jastrow-factor","page":"Usage","title":"Hubbard chain with Jastrow factor","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this example we simulate the same system as in example 1, the half-filled Hubbard chain. However in this case, we use a BCS trial wavefunction with a density-density Jastrow factor. A short tes simulation using  this script associated with this example can be run as","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"> julia hubbard_chain_jastrow.jl 1 4 1.0 2 2 300 1000 2000 100","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Below you will find a heavily commented script that includes details on what each part of the code is doing.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# Import the required packages\nusing LinearAlgebra\nusing Random\nusing Printf\n\nusing LatticeUtilities\nusing VariationalMC\n\n# We define a top-level function for running the VMC simulation.\n# Note that the arguments of this function correspond to the command line\n# arguments used to run this script.\nfunction run_hubbard_chain_simulation(\n    sID, \n    L,\n    U,\n    nup,\n    ndn,\n    N_equil,\n    N_opts,\n    N_updates,\n    N_bins; \n    filepath=\".\"\n)\n    # DEBUG flag which writes information to terminal during the simulation.\n    # For efficeincy, this should always be turned off. \n    debug = false\n\n    # Select which parameters in the variational wavefunction will be optimized.\n    optimize = (\n        # local s-wave pairing\n        Δ_0 = true,\n        # spin-x (in-plane magnetization)\n        Δ_sx = false,\n        # spin-z (out-of-plane magnetization)\n        Δ_sz = true,\n        # (BCS) chemical potential\n        μ = true,\n        # uniform charge density \n        Δ_cdw = false,\n        # density-density Jastrow \n        djastrow = true\n    )\n\n    # Specify whether the model will be particle-hole transformed.\n    # Note that this is required if adding pair fields to the wavefunction.\n    pht = true\n\n    # Construct the foldername the data will be written.\n    df_prefix = @sprintf \"hubbard_chain_U%.2f_nup%.2f_ndn%.2f_L%d_opt\" U, nup, ndn, L\n\n    # Append optimized parameter names to the foldername.\n    datafolder_prefix = create_datafolder_prefix(optimize, df_prefix)\n\n    # Initialize an instance of the SimulationInfo type.\n    # This type tracks of where the data is written, as well as \n    # which version of Julia and VariationalMC are used in the script. \n    simulation_info = SimulationInfo(\n        filepath = filepath, \n        datafolder_prefix = datafolder_prefix,\n        sID = sID\n    )\n\n    # Initialize the directory the data will be written.\n    initialize_datafolder(simulation_info)\n\n    # Initialize a random number generator that will be used throughout the simulation.\n    # We seed this function with a randomly sampled number for the\n    # global random number generator.\n    seed = abs(rand(Int))\n    rng = Xoshiro(seed)\n\n    # Set the optimization rate for the VMC simulation.\n    dt = 0.03     \n\n    # Set the stabilization factor used in parameter optimization. \n    η = 1e-4    \n\n    # Set the frequency in Monte Carlo steps with which the equal-time Green's function\n    # matrix will be recomputed using the numerical stabilization procedure.\n    n_stab_W = 50\n\n    # Set the frequency in Monte Carlo steps with which the Jastrow T vector will be\n    # recomputed using the numerical stabilization procedure.\n    n_stab_T = 50\n\n    # Specify the maximum allowed error in the equal-time Green's function matrix that\n    # is corrected by numerical stabilization.\n    δW = 1e-3\n\n    # Specify the maximum allowed error in the Jastrow T vector that is corrected \n    # by numerical stabilization.\n    δT = 1e-3\n\n    # Specify the optimization bin size.\n    # The optimization bin size if the number of measurments that are averaged over each time data\n    # is written to file during optimization. \n    opt_bin_size = 3000\n\n    # Calculate the simulation bin size.\n    # The bin size is the number of measurements that are averaged over each time data is written\n    # to file during the simulation.\n    bin_size = div(N_updates, N_bins)\n\n    # Initialize a dictionary to store additional information about the simulation.\n    # This is a sort of \"notebook\" for tracking extraneous parameters during the VMC simulation.\n    metadata = Dict()\n    metadata[\"N_equil\"] = N_equil\n    metadata[\"N_opts\"] = N_opts\n    metadata[\"N_updates\"] = N_updates\n    metadata[\"N_bins\"] = N_bins\n    metadata[\"seed\"] = seed\n    metadata[\"pht\"] = true\n    metadata[\"δW\"] = δW\n    metadata[\"dt\"] = dt \n    metadata[\"opt_flags\"] = optimize \n    metadata[\"avg_acceptance_rate\"] = 0.0\n    metadata[\"opt_time\"] = 0.0\n    metadata[\"sim_time\"] = 0.0\n    metadata[\"total_time\"] = 0.0\n\n    #######################\n    ### DEFINE THE MODEL ##\n    #######################\n\n    # Initialize an instance of the UnitCell type.\n    # This struct defines the UnitCell.\n    unit_cell = UnitCell(\n        lattice_vecs = [[1.0]],\n        basis_vecs   = [[0.0]]\n    )\n\n    # Initialize an instance of the Lattice type.\n    # The struct describes the size of the finite periodic lattice to be simulated.\n    # Note that the current version of LatticeUtilities requires \n    # periodic boundary conditions be used.\n    lattice = Lattice(\n        [L], \n        [true]\n    )\n\n    # Define the nearest neighbor bond for a 1D chain.\n    bond_x = Bond(\n        orbitals = (1,1), \n        displacement = [1]\n    )\n\n    # Define the next-nearest neighbor bonds for a 1D chain.\n    bond_xp = Bond(\n        orbitals = (1,1), \n        displacement = [2]\n    )\n\n    # Collect all bond definitions into a single vector.\n    # Note that this has the structure [[nearest],[next-nearest]].\n    bonds = [[bond_x], [bond_xp]]\n    \n    # Initialize an instance of the ModelGeometry type.\n    # This type helps keep track of all the relevant features of the lattice\n    # geometry being simulated, including the defintion of the unit cell,\n    # the size of the finite periodic lattice, and all the relevant\n    # bond defintions that may arise in the model.\n    model_geometry = ModelGeometry(\n        unit_cell, \n        lattice, \n        bonds\n    )\n\n    ##############################\n    ### INITIALIZE MEASUREMENTS ##\n    ##############################\n\n    # Initialize the container that measurements will be accumulated into.\n    measurement_container = initialize_measurement_container(\n        N_opts, \n        opt_bin_size, \n        N_bins, \n        bin_size,\n        determinantal_parameters,\n        model_geometry\n    )\n\n    # Initialize the sub-directories to which the various measurements will be written.\n    initialize_measurement_directories(\n        simulation_info, \n        measurement_container\n    )\n\n    ############################\n    ### SET-UP VMC SIMULATION ##\n    ############################\n\n    # Determine the total particle density in the canonical ensemble. \n    (density, Np, Ne) = get_particle_density(nup, ndn)\n\n    # Define the nearest neighbor hopping amplitude, setting the energy scale of the system. \n    t = 1.0;\n\n    # Define the next-nearest neighbor hopping amplitude.\n    tp = 0.0;\n\n    # Define the non-interacting tight binding model.\n    tight_binding_model = TightBindingModel(t, tp)\n\n    # Specify the minimum value of each variational parameter.\n    # Note that this is done to avoid open shell issues.\n    minabs_vpar = 1e-4;\n\n    # Initialize determinantal variational parameters.\n    determinantal_parameters = DeterminantalParameters(\n        optimize, \n        tight_binding_model, \n        model_geometry, \n        minabs_vpar, \n        Ne, \n        pht\n    )\n\n    # Initialize density-density Jastrow variational parameters. \n    djastrow_parameters = JastrowParameters(\n        \"e-den-den\",\n        optimize, \n        model_geometry,\n        rng\n    )\n\n    # Initialize the (fermionic) particle configuration cache.\n    pconfig_cache = nothing\n\n    ###########################\n    ### OPTIMIZATION UPDATES ##\n    ###########################\n\n    # Record start time for optimization. \n    opt_start_time = time()\n\n    # Iterate over optimization updates.\n    for bin in 1:N_opts\n\n        # Initialize the determinantal wavefunction.\n        detwf = get_determinantal_wavefunction(\n            tight_binding_model, \n            determinantal_parameters, \n            optimize, \n            Ne, \n            nup, \n            ndn, \n            model_geometry, \n            rng,\n            pconfig_cache\n        )   \n\n        # Initialize the density-density Jastrow factor.\n        djas_factor = get_jastrow_factor(\n            djastrow_parameters,\n            detwf,\n            model_geometry,\n            pht\n        )\n\n        # Iterate over equilibration/thermalization updates.\n        for step in 1:N_equil \n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf, djas_factor) = local_fermion_update!(\n                detwf, \n                djas_factor,\n                djastrow_parameters,\n                Ne, \n                model_geometry, \n                pht,\n                n_stab_W,\n                n_stab_T,\n                δW, \n                δT,\n                rng\n            )\n\n            # Record the acceptance rate for attempted local updates of the particle configuration.                                                         \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n        end\n\n        # Iterate over the number of optimization bins.\n        for n in 1:opt_bin_size\n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf, djas_factor) = local_fermion_update!(\n                detwf, \n                djas_factor,\n                djastrow_parameters,\n                Ne, \n                model_geometry, \n                pht,\n                n_stab_W,\n                n_stab_T,\n                δW, \n                δT,\n                rng\n            ) \n                                                                                                        \n            # Record the acceptance rate for attempted local updates of the particle configuration                                                       \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n            \n            # Make measurements, with results being recorded in the measurement container. \n            make_measurements!(\n                measurement_container, \n                detwf, \n                tight_binding_model, \n                djas_factor,\n                djastrow_parameters,\n                determinantal_parameters, \n                model_geometry, \n                Ne, \n                pht\n            )\n\n            # Write measurement for the current bin to file.\n            write_measurements!(\n                bin, \n                n, \n                measurement_container, \n                simulation_info\n            )\n        end\n\n        # Record the last particle configuration used in the current bin. \n        pconfig_cache = detwf.pconfig\n\n        # Process the measurement results, calculating error bars for all measurements. \n        # process_measurements(simulation_info, opt_bin_size)\n\n        # Attempt an update to the variational parameters using the Stochastic Reconfiguration procedure. \n        stochastic_reconfiguration!( \n            measurement_container,  \n            determinantal_parameters, \n            djastrow_parameters,\n            η, \n            dt, \n            bin, \n            opt_bin_size\n        )  \n    end     \n\n    # Record end time for optimization.\n    opt_end_time = time()\n\n    # Calculate the total time for optimization. \n    metadata[\"opt_time\"] += opt_end_time - opt_start_time\n\n    #########################\n    ### SIMULATION UPDATES ##\n    #########################\n\n    # Record start time for the simulation.\n    sim_start_time = time()\n\n    # Iterate over simulation updates.\n    for bin in 1:N_updates\n\n        # Initialize the determinantal wavefunction.\n        detwf = get_determinantal_wavefunction(\n            tight_binding_model, \n            determinantal_parameters, \n            optimize, \n            Ne, \n            nup, \n            ndn, \n            model_geometry, \n            rng,\n            pconfig_cache\n        )   \n\n        # Initialize the density-density Jastrow factor.\n        djas_factor = get_jastrow_factor(\n            djastrow_parameters,\n            detwf,\n            model_geometry,\n            pht\n        )\n\n        # Iterate over equilibration/thermalization updates.\n        for step in 1:N_equil \n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf, djas_factor) = local_fermion_update!(\n                detwf, \n                Ne, \n                model_geometry, \n                n_stab_W,\n                δW, \n                rng\n            )\n\n            # Record the acceptance rate for attempted local updates of the particle configuration.                                                         \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n        end\n\n        # Iterate over the number of simulation bins.\n        for n in 1:bin_size\n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf) = local_fermion_update!(\n                detwf, \n                djas_factor,\n                djastrow_parameters,\n                Ne, \n                model_geometry, \n                pht,\n                n_stab_W,\n                n_stab_T,\n                δW, \n                δT,\n                rng\n            ) \n                                                                                                        \n            # Record the acceptance rate for attempted local updates of the particle configuration                                                       \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n            \n            # Make measurements, with results being recorded in the measurement container. \n            make_measurements!(\n                measurement_container, \n                detwf, \n                tight_binding_model, \n                djas_factor,\n                djastrow_parameters,\n                determinantal_parameters, \n                model_geometry, \n                Ne, \n                pht\n            )\n\n            # Write measurement for the current bin to file.\n            write_measurements!(\n                bin, \n                n, \n                measurement_container, \n                simulation_info\n            )\n        end\n\n        # Record the last particle configuration used in the current bin. \n        pconfig_cache = detwf.pconfig\n\n        # Process the measurement results, calculating error bars for all measurements. \n        # process_measurements(simulation_info, bin_size)\n    end     \n\n    # Record end time for the simulation. \n    sim_end_time = time()\n\n    # Calculate total time for the simulation. \n    metadata[\"sim_time\"] += sim_end_time - sim_start_time\n\n    # Record the total runtime.\n    metadata[\"total_time\"] += metadata[\"opt_time\"] + metadata[\"sim_time\"]\n\n    # # Write simulation summary TOML file.\n    # save_simulation_info(simulation_info, metadata)\n\n    return nothing\nend \n\n# Only execute if the script is run directly from the command line.\nif abspath(PROGRAM_FILE) == @__FILE__\n\n    # Read in the command line arguments.\n    sID = parse(Int, ARGS[1]) # simulation ID\n    L = parse(Int, ARGS[2])\n    U = parse(Float64, ARGS[3])\n    nup = parse(Int, ARGS[4])\n    ndn = parse(Int, ARGS[5])\n    N_equil = parse(Int, ARGS[6])\n    N_opts = parse(Int, ARGS[7])\n    N_updates = parse(Int, ARGS[8])\n    N_bins = parse(Int, ARGS[9])\n\n    # Run the simulation.\n    run_hubbard_chain_simulation(sID, L, U, nup, ndn, N_equil, N_opts, N_updates, N_bins)\nend","category":"page"},{"location":"usage/#Square-Hubbard-model-with-Jastrow-factor","page":"Usage","title":"Square Hubbard model with Jastrow factor","text":"","category":"section"},{"location":"usage/","page":"Usage","title":"Usage","text":"In this next example, we will work though simulating the repulsive Hubbard model  on a 2D square lattice at half-filling. ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"The Hubbard Hamiltonian for a 2D square lattice is given by ","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"hatH = -t sum_langle ijrangle sigma (hatc^dagger_jsigmahatc^phantom dagger_i sigma + rm hc)\n+ U sum_i hatn_i uparrowhatn_i downarrow - mu sum_i sigma hatn_i sigma","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"where hatc^dagger_i sigma  (hatc^phantom dagger_i sigma) creates (annihilates) a spin sigma electron on site i in the lattice, and hatn_i sigma = hatc^dagger_i sigma hatc^phantom dagger_i sigma is the spin-sigma electron number operator for site i. In the above Hamiltonian t is the nearest neighbor hopping integral and U  0 controls the strength of the on-site Hubbard repulsion. Lastly, we consider the case that the system is half-filled and particle-hole symmetric, which occurs when when the chemical potential is zero, mu = 00.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Suppose we want to simulate a half-filled square Hubbard (mu = 00) of size N=4times 4 with U=10 with a uniform  d-wave trial wavefunction and a density-density Jastrow factor. This is accomplished by running the script associated with this example using the command","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"> julia hubbard_square_jastrow.jl 1 4 1.0 2 2 300 1000 2000 100","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"Below you will find a heavily commented script that includes details on what each part of the code is doing.","category":"page"},{"location":"usage/","page":"Usage","title":"Usage","text":"# Import the required packages\nusing LinearAlgebra\nusing Random\nusing Printf\n\nusing LatticeUtilities\nusing VariationalMC\n\n# We define a top-level function for running the VMC simulation.\n# Note that the arguments of this function correspond to the command line\n# arguments used to run this script.\nfunction run_hubbard_square_simulation(\n    sID, \n    L,\n    U,\n    nup,\n    ndn,\n    N_equil,\n    N_opts,\n    N_updates,\n    N_bins; \n    filepath=\".\"\n)\n    # DEBUG flag which writes information to terminal during the simulation.\n    # For efficeincy, this should always be turned off. \n    debug = false\n\n    # Select which parameters in the variational wavefunction will be optimized.\n    optimize = (\n        # local s-wave pairing\n        Δ_0 = false,\n        # site-dependent s-wave pairing  \n        Δ_spd = false,\n        # local d-wave pairing\n        Δ_d = true,\n        # site-dependent d-wave pairing \n        Δ_dpd = false,          \n        # pairing momentum\n        q_p = false,\n        # spin-x (in-plane magnetization)\n        Δ_sx = false,\n        # spin-z (out-of-plane magnetization)\n        Δ_sz = true,\n        # site-dependent spin density\n        Δ_ssd = false,\n        # (BCS) chemical potential\n        μ = false,\n        # uniform charge density \n        Δ_cdw = false,\n        # site-dependent charge density\n        Δ_csd = false,\n        # density-density Jastrow \n        djastrow = true,\n    )\n\n    # Specify whether the model will be particle-hole transformed.\n    # Note that this is required if adding pair fields to the wavefunction.\n    pht = true\n\n    # Construct the foldername the data will be written.\n    df_prefix = @sprintf \"hubbard_chain_U%.2f_nup%.2f_ndn%.2f_L%d_opt\" U, nup, ndn, L\n\n    # Append optimized parameter names to the foldername.\n    datafolder_prefix = create_datafolder_prefix(optimize, df_prefix)\n\n    # Initialize an instance of the SimulationInfo type.\n    # This type tracks of where the data is written, as well as \n    # which version of Julia and VariationalMC are used in the script. \n    simulation_info = SimulationInfo(\n        filepath = filepath, \n        datafolder_prefix = datafolder_prefix,\n        sID = sID\n    )\n\n    # Initialize the directory the data will be written.\n    initialize_datafolder(simulation_info)\n\n    # Initialize a random number generator that will be used throughout the simulation.\n    # We seed this function with a randomly sampled number for the\n    # global random number generator.\n    seed = abs(rand(Int))\n    rng = Xoshiro(seed)\n\n    # Set the optimization rate for the VMC simulation.\n    dt = 0.03     \n\n    # Set the stabilization factor used in parameter optimization. \n    η = 1e-4    \n\n    # Set the frequency in Monte Carlo steps with which the equal-time Green's function\n    # matrix will be recomputed using the numerical stabilization procedure.\n    n_stab_W = 50\n\n    # Set the frequency in Monte Carlo steps with which the Jastrow T vector will be\n    # recomputed using the numerical stabilization procedure.\n    n_stab_T = 50\n\n    # Specify the maximum allowed error in the equal-time Green's function matrix that\n    # is corrected by numerical stabilization.\n    δW = 1e-3\n\n    # Specify the maximum allowed error in the Jastrow T vector that is corrected \n    # by numerical stabilization.\n    δT = 1e-3\n\n    # Specify the optimization bin size.\n    # The optimization bin size if the number of measurments that are averaged over each time data\n    # is written to file during optimization. \n    opt_bin_size = 3000\n\n    # Calculate the simulation bin size.\n    # The bin size is the number of measurements that are averaged over each time data is written\n    # to file during the simulation.\n    bin_size = div(N_updates, N_bins)\n\n    # Initialize a dictionary to store additional information about the simulation.\n    # This is a sort of \"notebook\" for tracking extraneous parameters during the VMC simulation.\n    metadata = Dict()\n    metadata[\"N_equil\"] = N_equil\n    metadata[\"N_opts\"] = N_opts\n    metadata[\"N_updates\"] = N_updates\n    metadata[\"N_bins\"] = N_bins\n    metadata[\"seed\"] = seed\n    metadata[\"pht\"] = true\n    metadata[\"δW\"] = δW\n    metadata[\"dt\"] = dt \n    metadata[\"opt_flags\"] = optimize \n    metadata[\"avg_acceptance_rate\"] = 0.0\n    metadata[\"opt_time\"] = 0.0\n    metadata[\"sim_time\"] = 0.0\n    metadata[\"total_time\"] = 0.0\n\n    #######################\n    ### DEFINE THE MODEL ##\n    #######################\n\n    # Initialize an instance of the UnitCell type.\n    # This struct defines the UnitCell.\n    unit_cell = UnitCell(\n        lattice_vecs = [[1.0, 0.0], [0.0, 1.0]],\n        basis_vecs   = [[0.0, 0.0]]\n    )\n\n    # Initialize an instance of the Lattice type.\n    # The struct describes the size of the finite periodic lattice to be simulated.\n    # Note that the current version of LatticeUtilities requires \n    # periodic boundary conditions be used.\n    lattice = Lattice(\n        [L, L], \n        [true, true]\n    )\n\n    # Define the nearest neighbor x-bond for a square lattice.\n    bond_x = Bond(\n        orbitals = (1,1), \n        displacement = [1]\n    )\n\n    # Define the nearest neighbor y-bond for a square lattice.\n    bond_y = Bond(\n        orbitals = (1,1), \n        displacement = [0,1]\n    )\n\n    # Define the next-nearest neighbor bonds for a square lattice.\n    bond_xy = Bond(\n        orbitals = (1,1), \n        displacement = [1,1]\n    )\n\n    # Define the next-nearest neighbor bonds for a square lattice.\n    bond_yx = Bond(\n        orbitals = (1,1), \n        displacement = [1,-1]\n    )\n\n    # Collect all bond definitions into a single vector.\n    # Note that this has the structure [[nearest],[next-nearest]].\n    bonds = [[bond_x, bond_y], [bond_xy, bond_yx]]\n    \n    # Initialize an instance of the ModelGeometry type.\n    # This type helps keep track of all the relevant features of the lattice\n    # geometry being simulated, including the defintion of the unit cell,\n    # the size of the finite periodic lattice, and all the relevant\n    # bond defintions that may arise in the model.\n    model_geometry = ModelGeometry(\n        unit_cell, \n        lattice, \n        bonds\n    )\n\n    ##############################\n    ### INITIALIZE MEASUREMENTS ##\n    ##############################\n\n    # Initialize the container that measurements will be accumulated into.\n    measurement_container = initialize_measurement_container(\n        N_opts, \n        opt_bin_size, \n        N_bins, \n        bin_size,\n        determinantal_parameters,\n        model_geometry\n    )\n\n    # Initialize the sub-directories to which the various measurements will be written.\n    initialize_measurement_directories(\n        simulation_info, \n        measurement_container\n    )\n\n    ############################\n    ### SET-UP VMC SIMULATION ##\n    ############################\n\n    # Determine the total particle density in the canonical ensemble. \n    (density, Np, Ne) = get_particle_density(nup, ndn)\n\n    # Define the nearest neighbor hopping amplitude, setting the energy scale of the system. \n    t = 1.0;\n\n    # Define the next-nearest neighbor hopping amplitude.\n    tp = 0.0;\n\n    # Define the non-interacting tight binding model.\n    tight_binding_model = TightBindingModel(t, tp)\n\n    # Specify the minimum value of each variational parameter.\n    # Note that this is done to avoid open shell issues.\n    minabs_vpar = 1e-4;\n\n    # Initialize determinantal variational parameters.\n    determinantal_parameters = DeterminantalParameters(\n        optimize, \n        tight_binding_model, \n        model_geometry, \n        minabs_vpar, \n        Ne, \n        pht\n    )\n\n    # Initialize density-density Jastrow variational parameters. \n    djastrow_parameters = JastrowParameters(\n        \"e-den-den\",\n        optimize, \n        model_geometry,\n        rng\n    )\n\n    # Initialize the (fermionic) particle configuration cache.\n    pconfig_cache = nothing\n\n    ###########################\n    ### OPTIMIZATION UPDATES ##\n    ###########################\n\n    # Record start time for optimization. \n    opt_start_time = time()\n\n    # Iterate over optimization updates.\n    for bin in 1:N_opts\n\n        # Initialize the determinantal wavefunction.\n        detwf = get_determinantal_wavefunction(\n            tight_binding_model, \n            determinantal_parameters, \n            optimize, \n            Ne, \n            nup, \n            ndn, \n            model_geometry, \n            rng,\n            pconfig_cache\n        )   \n\n        # Initialize the density-density Jastrow factor.\n        djas_factor = get_jastrow_factor(\n            djastrow_parameters,\n            detwf,\n            model_geometry,\n            pht\n        )\n\n        # Iterate over equilibration/thermalization updates.\n        for step in 1:N_equil \n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf, djas_factor) = local_fermion_update!(\n                detwf, \n                djas_factor,\n                djastrow_parameters,\n                Ne, \n                model_geometry, \n                pht,\n                n_stab_W,\n                n_stab_T,\n                δW, \n                δT,\n                rng\n            )\n\n            # Record the acceptance rate for attempted local updates of the particle configuration.                                                         \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n        end\n\n        # Iterate over the number of optimization bins.\n        for n in 1:opt_bin_size\n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf, djas_factor) = local_fermion_update!(\n                detwf, \n                djas_factor,\n                djastrow_parameters,\n                Ne, \n                model_geometry, \n                pht,\n                n_stab_W,\n                n_stab_T,\n                δW, \n                δT,\n                rng\n            ) \n                                                                                                        \n            # Record the acceptance rate for attempted local updates of the particle configuration                                                       \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n            \n            # Make measurements, with results being recorded in the measurement container. \n            make_measurements!(\n                measurement_container, \n                detwf, \n                tight_binding_model, \n                djas_factor,\n                djastrow_parameters,\n                determinantal_parameters, \n                model_geometry, \n                Ne, \n                pht\n            )\n\n            # Write measurement for the current bin to file.\n            write_measurements!(\n                bin, \n                n, \n                measurement_container, \n                simulation_info\n            )\n        end\n\n        # Record the last particle configuration used in the current bin. \n        pconfig_cache = detwf.pconfig\n\n        # Process the measurement results, calculating error bars for all measurements. \n        # process_measurements(simulation_info, opt_bin_size)\n\n        # Attempt an update to the variational parameters using the Stochastic Reconfiguration procedure. \n        stochastic_reconfiguration!( \n            measurement_container,  \n            determinantal_parameters, \n            djastrow_parameters,\n            η, \n            dt, \n            bin, \n            opt_bin_size\n        )  \n    end     \n\n    # Record end time for optimization.\n    opt_end_time = time()\n\n    # Calculate the total time for optimization. \n    metadata[\"opt_time\"] += opt_end_time - opt_start_time\n\n    #########################\n    ### SIMULATION UPDATES ##\n    #########################\n\n    # Record start time for the simulation.\n    sim_start_time = time()\n\n    # Iterate over simulation updates.\n    for bin in 1:N_updates\n\n        # Initialize the determinantal wavefunction.\n        detwf = get_determinantal_wavefunction(\n            tight_binding_model, \n            determinantal_parameters, \n            optimize, \n            Ne, \n            nup, \n            ndn, \n            model_geometry, \n            rng,\n            pconfig_cache\n        )   \n\n        # Initialize the density-density Jastrow factor.\n        djas_factor = get_jastrow_factor(\n            djastrow_parameters,\n            detwf,\n            model_geometry,\n            pht\n        )\n\n        # Iterate over equilibration/thermalization updates.\n        for step in 1:N_equil \n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf, djas_factor) = local_fermion_update!(\n                detwf, \n                Ne, \n                model_geometry, \n                n_stab_W,\n                δW, \n                rng\n            )\n\n            # Record the acceptance rate for attempted local updates of the particle configuration.                                                         \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n        end\n\n        # Iterate over the number of simulation bins.\n        for n in 1:bin_size\n\n            # Attempt to update the fermionic particle configuration.\n            (acceptance_rate, detwf) = local_fermion_update!(\n                detwf, \n                djas_factor,\n                djastrow_parameters,\n                Ne, \n                model_geometry, \n                pht,\n                n_stab_W,\n                n_stab_T,\n                δW, \n                δT,\n                rng\n            ) \n                                                                                                        \n            # Record the acceptance rate for attempted local updates of the particle configuration                                                       \n            metadata[\"avg_acceptance_rate\"] += acceptance_rate;\n            \n            # Make measurements, with results being recorded in the measurement container. \n            make_measurements!(\n                measurement_container, \n                detwf, \n                tight_binding_model, \n                djas_factor,\n                djastrow_parameters,\n                determinantal_parameters, \n                model_geometry, \n                Ne, \n                pht\n            )\n\n            # Write measurement for the current bin to file.\n            write_measurements!(\n                bin, \n                n, \n                measurement_container, \n                simulation_info\n            )\n        end\n\n        # Record the last particle configuration used in the current bin. \n        pconfig_cache = detwf.pconfig\n\n        # Process the measurement results, calculating error bars for all measurements. \n        # process_measurements(simulation_info, bin_size)\n    end     \n\n    # Record end time for the simulation. \n    sim_end_time = time()\n\n    # Calculate total time for the simulation. \n    metadata[\"sim_time\"] += sim_end_time - sim_start_time\n\n    # Record the total runtime.\n    metadata[\"total_time\"] += metadata[\"opt_time\"] + metadata[\"sim_time\"]\n\n    # # Write simulation summary TOML file.\n    # save_simulation_info(simulation_info, metadata)\n\n    return nothing\nend \n\n# Only execute if the script is run directly from the command line.\nif abspath(PROGRAM_FILE) == @__FILE__\n\n    # Read in the command line arguments.\n    sID = parse(Int, ARGS[1]) # simulation ID\n    L = parse(Int, ARGS[2])\n    U = parse(Float64, ARGS[3])\n    nup = parse(Int, ARGS[4])\n    ndn = parse(Int, ARGS[5])\n    N_equil = parse(Int, ARGS[6])\n    N_opts = parse(Int, ARGS[7])\n    N_updates = parse(Int, ARGS[8])\n    N_bins = parse(Int, ARGS[9])\n\n    # Run the simulation.\n    run_hubbard_square_simulation(sID, L, U, nup, ndn, N_equil, N_opts, N_updates, N_bins)\nend","category":"page"},{"location":"#VariationalMC.jl","page":"Home","title":"VariationalMC.jl","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for VariationalMC.jl. This package impelments the variational Monte Carlo (VMC) method for Hubbard and electron-phonon interactions (coming soon).","category":"page"},{"location":"","page":"Home","title":"Home","text":"This code is currently the experimental stage of development. Use with caution. ","category":"page"},{"location":"#Funding","page":"Home","title":"Funding","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"The development of this code was supported by the U.S. Department of Energy, Office of Science, Office of Workforce Development for Teachers and Scientists, Office of Science Graduate Student Research (SCGSR) program. The SCGSR program is administered by the Oak Ridge Institute for Science and Education (ORISE) for the DOE. ORISE is managed by ORAU under contract number DE-SC0014664.","category":"page"},{"location":"#Installation","page":"Home","title":"Installation","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"To install the VariationalMC.jl, simply open the Julia REPL and run the commands","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> ]\npkg> add VariationalMC","category":"page"},{"location":"","page":"Home","title":"Home","text":"or equivalently via Pkg do","category":"page"},{"location":"","page":"Home","title":"Home","text":"julia> using Pkg; Pkg.add(\"VariationalMC\")","category":"page"},{"location":"#Notable-External-Package-Dependencies","page":"Home","title":"Notable External Package Dependencies","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"This section reviews some notable package dependencies.","category":"page"},{"location":"","page":"Home","title":"Home","text":"LatticeUtilties.jl: Package that is used to represent arbitrary lattice geometries.\nOrderedCollections.jl: Package that implements associative containers that preserve the order of insertion.\nJLD2.jl: Package used to write data to binary files in an HDF5 compatible format. \nCSV.jl: Package used for handling delimited text data.","category":"page"},{"location":"#Contact","page":"Home","title":"Contact","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"For questions and comments regarding this package, please email Andy Tanjaroon Ly at atanjaro@vols.utk.edu.","category":"page"}]
}
